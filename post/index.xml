<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Krzysztof Góralski</title>
    <link>https://kgoralski.github.io/post/index.xml</link>
    <description>Recent content in Posts on Krzysztof Góralski</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>[Krzysztof Góralski](https://kgoralski.github.io/). Released under the MIT license&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <lastBuildDate>Fri, 06 Jan 2017 15:35:47 +0100</lastBuildDate>
    <atom:link href="https://kgoralski.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Interesting Stuff - Volume II</title>
      <link>https://kgoralski.github.io/post/interesting-stuff-II/</link>
      <pubDate>Fri, 06 Jan 2017 15:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/interesting-stuff-II/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.redhat.com/blog/2016/12/09/spring-cloud-for-microservices-compared-to-kubernetes/&#34;&gt;Spring Cloud for Microservices Compared to Kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecentric.de/en/2016/04/event-driven-microservices-spring-cloud-stream/&#34;&gt;Event Driven Microservices with Spring Cloud Stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thenewstack.io/ten-commandments-microservices/&#34;&gt;The Ten Commandments of Microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/bliki/MicroservicePrerequisites.html&#34;&gt;You need to be this tall to use Microservices&lt;/a&gt; and &lt;a href=&#34;https://news.ycombinator.com/item?id=12509533&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/ideas/swarm-v-fleet-v-kubernetes-v-mesos&#34;&gt;Docker Swarm vs Fleet vs Kubernetes vs Mesos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://techbeacon.com/one-year-using-kubernetes-production-lessons-learned&#34;&gt;One year using Kubernetes in production: Lessons learned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udacity.com/course/scalable-microservices-with-kubernetes--ud615&#34;&gt;Udacity Course: Scalable Microservices with Kubernetes by Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kubernetes.io/docs/tutorials/kubernetes-basics/&#34;&gt;Official Kubernetes Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=AoDhQt8PtUQ&#34;&gt;Docker + Kubernetes + OpenShift Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://virtualjug.com/kubernetes-for-java-developers/&#34;&gt;Kubernetes for Java Developers&lt;/a&gt; and &lt;a href=&#34;https://fabric8.io/presentations/kubernetes-for-java-developers/#/&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.xebialabs.com/2016/12/15/before-you-go-over-the-container-cliff-with-docker-mesos-etc-points-to-consider/&#34;&gt;Before You Go Over the Container Cliff with Docker, Mesos etc: Points to Consider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spotify/docker-kafka&#34;&gt;Docker &amp;amp; Kafka by Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rajkrrsingh.blogspot.com/2016/02/running-apache-kafka-in-docker-container.html&#34;&gt;Running Kafka in Docker Container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thehftguy.com/2016/11/01/docker-in-production-an-history-of-failure/&#34;&gt;Docker in Production: A History of Failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a6mUgiR0g9w&#34;&gt;Apache Mesos Ecosystem at Allegro - First Year of Production Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jmnarloch.wordpress.com/2016/07/13/spring-cloud-stream-hermes-binder/&#34;&gt;Spring Cloud Stream &amp;amp; Hermes Messaging&lt;/a&gt; and &lt;a href=&#34;https://prezi.com/m/i0tpqxeimbmz/hermes-loses-events/&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JXEjAwNWays&#34;&gt;Golang UK Conference 2016 - Peter Bourgon - Go + Microservices = Go Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WiCru2zIWWs&#34;&gt;GOTO 2016 - Microservices in Go - Matt Heath&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://prometheus.io/&#34;&gt;The Prometheus monitoring system and time series database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://grafana.org&#34;&gt;Grafana - Gorgeous metric viz, dashboards &amp;amp; editors for Graphite, InfluxDB &amp;amp; Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hammerprinciple.com/therighttool&#34;&gt;Programming languages ranker &amp;amp; comparisons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/scala-syntax-7-images-michele-sciabarr%C3%A0&#34;&gt;Scala Syntax in 7 images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://imgur.com/fR6Ynq9&#34;&gt;Agile Landscape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/chrislusf/seaweedfs&#34;&gt;SeaweedFS&lt;/a&gt; - a simple and highly scalable distributed file system&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mapstruct.org/&#34;&gt;MapStruct&lt;/a&gt; - &amp;ldquo;Java bean mappings, the easy way&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baeldung.com/spring-security-oauth-jwt&#34;&gt;Using JWT with Spring Security OAuth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://opensource.googleblog.com/2017/01/grumpy-go-running-python.html?m=1&#34;&gt;Grumpy - Golang running Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://hyperpolyglot.org/&#34;&gt;Programming Languages - commonly used features in a side-by-side format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ecIWPzGEbFc&#34;&gt;&amp;ldquo;Uncle&amp;rdquo; Bob Martin - &amp;ldquo;The Future of Programming&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Kotlin &#43; Spring Boot = Kotlinboot</title>
      <link>https://kgoralski.github.io/post/kotlinboot/</link>
      <pubDate>Fri, 30 Dec 2016 21:12:10 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/kotlinboot/</guid>
      <description>&lt;p&gt;Another day, another CRUD ;) . Inspired by one of JUG meetings decided to write another example of application.
This time it is Kotlin and Spring Boot. But it is a quick one. After checking some languages this year I think that I will spend my free time with Golang in 2017 ;)&lt;/p&gt;

&lt;p&gt;Example is here: &lt;a href=&#34;https://github.com/kgoralski/kotlin-springboot-template&#34;&gt;https://github.com/kgoralski/kotlin-springboot-template&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Kotlin
Spring Boot
REST JAX-RS and Jersey Proxy Client
HATEOAS Example
Sprind Data JPA with H2 Database
Spring Data NoSQL with Apache Cassandra (from Docker for App, embedded for Tests)
Spring Data REST
Tests with Spock
Gradle Kotlin Script with multi modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Impressions? Not much, didn&amp;rsquo;t really feel that I&amp;rsquo;m learning new language:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Feels easy to adopt, but still it is a new language. So it needs learning too ;)&lt;/li&gt;
&lt;li&gt;&amp;lsquo;Better Java&amp;rsquo;? Probably we can use Kotlin like that&lt;/li&gt;
&lt;li&gt;Less boilerplate&lt;/li&gt;
&lt;li&gt;Null safety&lt;/li&gt;
&lt;li&gt;Immutability&lt;/li&gt;
&lt;li&gt;Data Class! Better than Lombok :)&lt;/li&gt;
&lt;li&gt;Gotta watchout on empty constructors while using Java Frameworks (Jackson etc.)&lt;/li&gt;
&lt;li&gt;Intellij IDEA can convert Java to Kotlin&lt;/li&gt;
&lt;li&gt;Constructor Injection Preference&lt;/li&gt;
&lt;li&gt;Less annotations?&lt;/li&gt;
&lt;li&gt;Gradle Kotlin Script - love IDEA code completion (but you need to update Kotlin Plugin for that)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I guess that after some learning time developers will be able to be more productive with Kotlin.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ratpack</title>
      <link>https://kgoralski.github.io/post/ratpack/</link>
      <pubDate>Mon, 17 Oct 2016 08:41:23 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/ratpack/</guid>
      <description>&lt;p&gt;So, I heard that Java is not only about Spring or Java EE  :) There are also: Ratpack, &lt;a href=&#34;https://github.com/orefalo/lagom-sample-bank&#34;&gt;Lagom&lt;/a&gt;, &lt;a href=&#34;https://github.com/prajwalan/sparkjava-restapi-crud&#34;&gt;SparkJava&lt;/a&gt;, Akka&amp;hellip;Below, you will find great informations about Ratpack :) Check &lt;a href=&#34;http://salerno-rafael.blogspot.com/2016/08/ratpack-event-driven-framework-base-on.html&#34;&gt;this&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Ratpack’s goals from &lt;a href=&#34;https://ratpack.io/manual/current/intro.html#goals&#34;&gt;docs &lt;/a&gt; are:
&lt;ol&gt;
    &lt;li&gt;To be fast, scalable, and efficient (Ratpack server  is up in 1 second)&lt;/li&gt;
    &lt;li&gt;To allow applications to evolve in complexity without compromise&lt;/li&gt;
    &lt;li&gt;To leverage the benefits of non-blocking programming and reduce the costs&lt;/li&gt;
    &lt;li&gt;To be flexible and unopinionated when it comes to integrating other tools and libraries&lt;/li&gt;
    &lt;li&gt;To allow applications to be easily and thoroughly tested&lt;/li&gt;
&lt;/ol&gt;
Ratpacks’s goals are &lt;strong&gt;not&lt;/strong&gt;:
&lt;ol&gt;
    &lt;li&gt;To be a fully integrated, “full stack” solution&lt;/li&gt;
    &lt;li&gt;Provide every feature you might need in a neat box&lt;/li&gt;
    &lt;li&gt;To provide an architecture or framework for “business logic”&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;When to use Ratpack?&lt;/div&gt;
&lt;ul&gt;
    &lt;li&gt;Micro-services&lt;/li&gt;
    &lt;li&gt;High-througthput apps&lt;/li&gt;
    &lt;li&gt;Lightweight apps&lt;/li&gt;
    &lt;li&gt;Cloud Deployments&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
Resources:
&lt;ol&gt;
    &lt;li&gt;&lt;a href=&#34;https://danhyun.github.io/2016-jeeconf-rapid-ratpack-java/&#34;&gt;Rapid Java Web Application Development with Ratpack&lt;/a&gt; + &lt;a href=&#34;https://github.com/danhyun/2016-jeeconf-rapid-ratpack-java&#34;&gt;github&lt;/a&gt; + &lt;a href=&#34;https://www.youtube.com/watch?v=2p3IO39BK1k&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gSL0OSCQcsY&#34;&gt;Devoxx Poland 2016 - Laurent Doguin - A practical RxJava example with Ratpack&lt;/a&gt; +&lt;a href=&#34;https://github.com/ldoguin/ratpack-couchbase-repository-sample&#34;&gt;github&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://blog.couchbase.com/2016/april/crud-rest-api-couchbase-rxjava-ratpack&#34;&gt;A CRUD REST API with Couchbase, RxJava and Ratpack&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/danhyun/modern-java-web&#34;&gt;Modern Java Web&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://ratpack.io/manual/current/spring.html&#34;&gt;Ratpack &amp;amp; Spring Boot&lt;/a&gt; and &lt;a href=&#34;https://www.infoq.com/articles/Ratpack-and-Spring-Boot&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/mobile/SpringCentral/high-performance-microservices-with-ratpack-and-spring-boot-64889596&#34;&gt;Sping &amp;amp; Ratpack Slideshare&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Great post &lt;a href=&#34;http://salerno-rafael.blogspot.com/2016/08/ratpack-event-driven-framework-base-on.html&#34;&gt;About Ratpack&lt;/a&gt; by Rafael Salerno&lt;/li&gt;
    &lt;li&gt;Testing [&lt;a href=&#34;https://github.com/danhyun/2016-greach-testing-ratpack-applications&#34;&gt;1&lt;/a&gt;], [&lt;a href=&#34;http://alvarosanchez.github.io/ratpack-101/#_testing_ratpack_applications_with_spock_20_minutes&#34;&gt;2&lt;/a&gt;],[&lt;a href=&#34;https://danhyun.github.io/2016-gr8confus-testing-ratpack-apps/&#34;&gt;3&lt;/a&gt;]&lt;/li&gt;
    &lt;li&gt;Often &lt;a href=&#34;http://www.jooq.org/why-jOOQ.pdf&#34;&gt;jOOQ &lt;/a&gt;is used with Ratpack, instead of Hibernate.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go Language - First Impressions</title>
      <link>https://kgoralski.github.io/post/go-impressions/</link>
      <pubDate>Sun, 04 Sep 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/go-impressions/</guid>
      <description>&lt;p&gt;Just wrote something small with Go Language. Simple CRUD/webservice with MySQL using gorilla mux and sqlx, but it is almost plain golang in dockerized environment. If anything wrong about it, tell me. If you know polish language you can check also this link: &lt;a href=&#34;http://www.consdata.pl/blog/12-pirewsze-kroki-z-golang&#34;&gt;http://www.consdata.pl/blog/12-pirewsze-kroki-z-golang&lt;/a&gt; ;)&lt;/p&gt;

&lt;p&gt;Here are my impressions about it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it feels pragmatic from the beginning&lt;/li&gt;
&lt;li&gt;probably you don’t need any frameworks at all to use it&lt;/li&gt;
&lt;li&gt;simpler = better, simplicity as a feature&lt;/li&gt;
&lt;li&gt;quite easy to write REST application&lt;/li&gt;
&lt;li&gt;the build in package manager ‘go get’ is cool thing&lt;/li&gt;
&lt;li&gt;compilation &amp;amp; running time of go server is much faster than java&lt;/li&gt;
&lt;li&gt;it doesn’t eat much of resources&lt;/li&gt;
&lt;li&gt;you can use many text editors or IDEs for it (IntelliJ has Go Plugin)&lt;/li&gt;
&lt;li&gt;gofmt – one and the only code formatter&lt;/li&gt;
&lt;li&gt;designed for special needs, not for everything&lt;/li&gt;
&lt;li&gt;it is easy to find examples by googling it, good enough community&lt;/li&gt;
&lt;li&gt;return multiple values from Go functions – nice feature&lt;/li&gt;
&lt;li&gt;syntax not beautiful like Python but still good&lt;/li&gt;
&lt;li&gt;the build in ‘testing’ package – ok, but too simple (testify looks better)&lt;/li&gt;
&lt;li&gt;concurrency – believe that it is nice, but didn’t tried it yet&lt;/li&gt;
&lt;li&gt;it is much different than Scala – complexity vs simplicity&lt;/li&gt;
&lt;li&gt;I think that I could be very productive with Go if i will get used to it&lt;/li&gt;
&lt;li&gt;Docker, Kubernetes, CoreOs,  Consul, Flynn, Lime, Google, Dropbox…&lt;/li&gt;
&lt;li&gt;heard that golang is good for ‘real time apps’ – want to try it soon&lt;/li&gt;
&lt;li&gt;it seems to be good for building command-line tools&lt;/li&gt;
&lt;li&gt;it is different than Java, little bit tricky at beginning, but easy to start ;)&lt;/li&gt;
&lt;li&gt;‘good when you need to write something yourself instead of using library’&lt;/li&gt;
&lt;li&gt;need to find idea for real project, because I kinda like Go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Links:
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://danmux.com/posts/what_golang_isnt/&#34;&gt;What Golang Is and Is Not&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://jimplush.com/talk/2015/12/19/moving-a-team-from-scala-to-golang/&#34;&gt;Moving a team from Scala to Golang&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/&#34;&gt;Handling 1 Million Requests per Minute with Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://text.sourcegraph.com/google-i-o-talk-building-sourcegraph-a-large-scale-code-search-cross-reference-engine-in-go-1f911b78a82e#.jd729lgy5&#34;&gt;Sourcegraph, a large-scale code search &amp;amp; cross-reference engine in Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b#.o6e4uex72&#34;&gt;Farewell Node.js - Leaving node.js land for Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://hashrocket.com/blog/posts/websocket-shootout&#34;&gt;Websocket Shootout: Clojure, C++, Elixir, Go, NodeJS, and Ruby&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JOx9enktnUM&#34;&gt;Go at Dropbox&lt;/a&gt; and &lt;a href=&#34;https://www.bigmarker.com/remote-meetup-go/Go-at-Dropbox&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/jpetazzo/docker-and-go-why-did-we-decide-to-write-docker-in-go&#34;&gt;Here&amp;rsquo;s Why Docker Was Written in Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/appleboy/write-microservice-in-golang&#34;&gt;Write microservice in golang&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://zduck.com/2014/go-and-package-versioning/&#34;&gt;Go and Package Versioning&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://allegro.tech/2016/03/writing-fast-cache-service-in-go.html&#34;&gt;allegro.tech - Writing a cache service with millions of entries in Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://eng.uber.com/go-geofence/&#34;&gt;Uber &amp;amp; Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/faq#What%5Fis%5Fthe%5Fpurpose%5Fof%5Fthe%5Fproject&#34;&gt;What is the purpose of Go project?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/GoUsers&#34;&gt;GoUsers&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.itjobswatch.co.uk/jobs/uk/go.do&#34;&gt;Go UK Jobs Watch&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.indeed.com/jobtrends/q-golang.html&#34;&gt;indeed job trends&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-is-the-future-of-the-Go-programming-language&#34;&gt;What is the future of the Go programming language?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.quora.com/Why-is-the-programming-language-GO-getting-so-popular-lately&#34;&gt;Why is the programming language GO getting so popular lately?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://blog.ralch.com/tutorial/golang-performance-and-memory-analysis/&#34;&gt;Performance and memory analysis of Golang programs&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.savethecode.com/racing-day-web-frameworks/&#34;&gt;Web Frameworks Benchmarks&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://opencredo.com/java-go-back/&#34;&gt;From Java to Go, and Back Again&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/golang/comments/579wsk/from_java_to_go_and_back_again/?&#34;&gt;community reaction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Univocity Parsers Library</title>
      <link>https://kgoralski.github.io/post/univocity-parsers/</link>
      <pubDate>Thu, 25 Aug 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/univocity-parsers/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.univocity.com/&#34;&gt;Official Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/com.univocity/univocity-parsers&#34;&gt;Maven Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below you can find how to parse .csv file with univocity library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ExampleCsvToPojoParser {
   
    private final Logger logger = LoggerFactory.getLogger(CsvToPojoParser.class);
   
    public &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; parseFileToPojo(Class&amp;lt;T&amp;gt; clazz, String fileName) {
   
        BeanListProcessor&amp;lt;T&amp;gt; rowProcessor = new BeanListProcessor&amp;lt;T&amp;gt;(clazz);
   
        CsvParserSettings parserSettings = new CsvParserSettings();
   
        parserSettings.setRowProcessor(rowProcessor);
        parserSettings.setHeaderExtractionEnabled(true);
        parserSettings.setLineSeparatorDetectionEnabled(true);
        parserSettings.setSkipEmptyLines(true);
   
        CsvParser parser = new CsvParser(parserSettings);
        try (InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream(fileName)) {
            parser.parse(resourceAsStream);
        } catch (IOException e) {
            logger.error(&amp;quot;Cannot read file &amp;quot; + fileName, e );
        }
        return rowProcessor.getBeans();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can put there class like this (which will match the file):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Users {
   
    @Trim
    @NullString(nulls = { &amp;quot; &amp;quot;, &amp;quot;&amp;quot; })
    @Parsed(field = &amp;quot;USER_ID&amp;quot;)
    private Long userId;
    @Trim
    @NullString(nulls = { &amp;quot; &amp;quot;, &amp;quot;&amp;quot; })
    @Parsed(field = &amp;quot;USER_NAME&amp;quot;)
    private String userName;
    //getters &amp;amp; setters
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>My programming books</title>
      <link>https://kgoralski.github.io/post/job-change/</link>
      <pubDate>Sun, 31 Jul 2016 08:41:23 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/job-change/</guid>
      <description>&lt;p&gt;My current, unordered book list but I wasn’t able to read them all, yet.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Core Java, Volume I and II; Horstmann&lt;/li&gt;
&lt;li&gt;Thinking in Java; Eckel&lt;/li&gt;
&lt;li&gt;OCA/OCP Java SE 7 Programmer I &amp;amp; II Study Guide; Sierra &amp;amp; Bates&lt;/li&gt;
&lt;li&gt;Effective Java; Bloch&lt;/li&gt;
&lt;li&gt;Java Concurrency in Practice; Goetz&lt;/li&gt;
&lt;li&gt;Spring Boot in Action; Walls&lt;/li&gt;
&lt;li&gt;Java EE 7 Development with WildFly; Ćmil, Matłoka, Marchioni&lt;/li&gt;
&lt;li&gt;The C Programming Language; Kernighan, Ritchie&lt;/li&gt;
&lt;li&gt;The C++ Programming Language; Stroustrup&lt;/li&gt;
&lt;li&gt;Effective Modern C++; Meyers&lt;/li&gt;
&lt;li&gt;Learning Python: Powerful Object-Oriented Programming; Lutz&lt;/li&gt;
&lt;li&gt;Scala for the Impatient; Horstmann&lt;/li&gt;
&lt;li&gt;Functional Programming in Scala; Chiusano, Bjarnason&lt;/li&gt;
&lt;li&gt;Seven Languages in Seven Weeks, Tate&lt;/li&gt;
&lt;li&gt;Algorithms Unlocked, Cormen&lt;/li&gt;
&lt;li&gt;Introduction to Algorithms, Cormen&lt;/li&gt;
&lt;li&gt;Design Patterns; Gang of Four&lt;/li&gt;
&lt;li&gt;Head First, Design Patterns; Sierra, Robson, Bates &amp;amp; Freeman&lt;/li&gt;
&lt;li&gt;Clean Code; Martin&lt;/li&gt;
&lt;li&gt;The Pragmatic Programmer; Hunt&lt;/li&gt;
&lt;li&gt;The Software Craftsman: Professionalism, Pragmatism, Pride; Mancuso&lt;/li&gt;
&lt;li&gt;The Go Programming Language, Donovan &amp;amp; Kernighan&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Wildfly CRUD example with Docker</title>
      <link>https://kgoralski.github.io/post/wildfly-crud-docker/</link>
      <pubDate>Sun, 31 Jul 2016 08:41:23 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/wildfly-crud-docker/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not that familiar with pure Java EE stack. My experience is mostly mixing Java EE with Spring. So, I just wanted to play with it. You can find it here:
&lt;a href=&#34;https://github.com/kgoralski/wildfly-template&#34;&gt;&lt;a href=&#34;https://github.com/KrzysztofGoralski/wildfly-template&#34;&gt;https://github.com/KrzysztofGoralski/wildfly-template&lt;/a&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Java EE
JAX-RS - RESTEasy
Apache Deltaspike (similiar to Spring Data)
H2 Database
Docker
Maven
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is just an example and far from real application. It will be required to add tests for sure and it would be interesting to do it this way:
&lt;a href=&#34;http://blog.arungupta.me/run-javaee-tests-wildfly-docker-arquillian-cube/&#34;&gt;Docker with Arquillian Cube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install Docker first&amp;hellip; I&amp;rsquo;m using Intellij IDEA Ultimate, to add docker to this IDE:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. File-&amp;gt; Settings-&amp;gt; Builds, Executions, Deployment -&amp;gt; Clouds
2. Add Docker with API URL = unix:///var/run/docker.sock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My dockerfile is simple and using jboss/wildfly image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;FROM jboss/wildfly
ADD target/wildfly-template.war /opt/jboss/wildfly/standalone/deployments/
RUN /opt/jboss/wildfly/bin/add-user.sh admin Admin#70365 --silent
CMD [&amp;quot;/opt/jboss/wildfly/bin/standalone.sh&amp;quot;, &amp;quot;-b&amp;quot;, &amp;quot;0.0.0.0&amp;quot;, &amp;quot;-bmanagement&amp;quot;, &amp;quot;0.0.0.0&amp;quot;]
EXPOSE 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. Run -&amp;gt; Run... -&amp;gt; Edit Configurations
2. Add Docker deployment
3. Add image tag and container name in Deployment Tab
4. Generate new container_settings.json in Container tab
5. Run it :)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Must Read: Software Craftsmanship</title>
      <link>https://kgoralski.github.io/post/software-craftsman/</link>
      <pubDate>Thu, 07 Jul 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/software-craftsman/</guid>
      <description>&lt;p style=&#34;text-align:left;&#34;&gt;&lt;strong&gt;&lt;a href=&#34;http://www.goodreads.com/book/show/18054154-software-craftsmanship&#34;&gt;by Sandro Mancuso&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;img class=&#34;size-full wp-image-597 alignnone&#34; src=&#34;https://krzysztofgoralski.files.wordpress.com/2016/07/18054154.jpg&#34; alt=&#34;18054154&#34; width=&#34;270&#34; height=&#34;349&#34; /&gt;
&lt;p style=&#34;text-align:left;&#34;&gt;Really. You must read it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interesting Stuff - Volume I</title>
      <link>https://kgoralski.github.io/post/interesting-stuff-I/</link>
      <pubDate>Mon, 30 May 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/interesting-stuff-I/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.adam-bien.com/roller/abien/entry/the_ingredients_and_roadmap_of&#34;&gt;Java EE 8 &amp; 9 Road map&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.adam-bien.com/roller/abien/entry/load_balancing_java_ee_microservices&#34;&gt;Load Balancing Microservices with Ha-Proxy&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLPIzp-E1msrYicmovyeuOABO4HxVPlhEA&#34;&gt;Java 2016 videos&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://vimeo.com/album/4133413&#34;&gt;JavaZone 2016 videos&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://vimeo.com/181948154&#34;&gt;RxJava in legacy projects&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://spring.io/blog/2016/09/22/new-in-spring-5-functional-web-framework&#34;&gt;Spring 5: Functional Web Framework&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/akarnokd/akarnokd-misc/issues/2&#34;&gt;RxJava 1.0 vs RxJava 2.0 vs Reactor - Benchmarks&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://yonik.com/solr-tutorial/&#34;&gt;Apache Solr Tutorial&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://allegro.tech/2016/09/CQK-TOP-10.html&#34;&gt;Performance and Availability pitfalls in the Microservices Architecture — CQK Top 10&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://microprofile.io/blog/2016/09/microprofile-at-javaone&#34;&gt;Announcing MicroProfile 1.0&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://swift.org/blog/swift-3-0-released/&#34;&gt;Swift 3.0 Released&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLDWZ5uzn69eyh791ZTkEA9OaTxVpGY8_g&#34;&gt;Golang UK Conference 2016 - videos&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://monzo.com/blog/2016/09/19/building-a-modern-bank-backend/&#34;&gt;Building a Modern Bank Backend (Golang)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://dave.cheney.net/2016/09/18/go-1-8-performance-improvements-one-month-in&#34;&gt;Go 1.8 performance improvements&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://medium.com/@theflapjack103/the-way-of-the-gopher-6693db15ae1f#.rmz5gqru9&#34;&gt;Making the Switch from Node.js to Golang&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://gradle.org/blog/linkedin-introduces-pygradle-open-source-python-plugin-gradle/&#34;&gt;{py}gradle, an open source Python plugin for Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://torusware.com/blog/2016/09/hands-on-orchestration-docker-1-12-swarm-vs-kubernetes/&#34;&gt;Docker Swarm vs Kubernetes&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://blog.docker.com/2016/09/java-development-using-docker/&#34;&gt;Live debugging Java with docker&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2016/9/28/how-uber-manages-a-million-writes-per-second-using-mesos-and.html&#34;&gt;How Uber manages million writes per second using Mesos and Cassandra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Oracle, Java EE 8 Drama &amp; releted stuff:
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/java-ee-8-in-crisis?utm_content=buffer8f8be&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer&#34;&gt;Java EE 8 in Crisis!&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://jaxenter.com/debate-where-is-java-ee-headed-to-127356.html&#34;&gt;The debate continues: Where is Java EE headed to?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://arstechnica.com/information-technology/2016/07/how-oracles-business-as-usual-is-threatening-to-kill-java/&#34;&gt;How Oracle’s business as usual is threatening to kill Java&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://techsticles.blogspot.ch/2016/07/oracle-and-fall-of-java-ee.html&#34;&gt;Oracle and the fall of Java EE&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://blog.takipi.com/java-ee-vs-java-se-has-oracle-given-up-on-enterprise-software/&#34;&gt;Java EE vs Java SE: Has Oracle Given up on Enterprise Software?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/myfear/nine-neins-where-java-ee-will-never-take-you?utm_content=buffer3caf9&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer&#34;&gt;Nine Neins - where Java EE will never take you&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://microprofile.io/&#34;&gt;MicroProfile.io&lt;/a&gt; - optimizing Enterprise Java for a microservices architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://coconut-lang.org/&#34;&gt;Coconut&lt;/a&gt; &lt;strong&gt;-&lt;/strong&gt; simple, elegant, Pythonic functional programming language&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://elixir-lang.org/blog/2016/06/21/elixir-v1-3-0-released/&#34;&gt;Elixir v1.3 released&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=u25Xc88d_iE&amp;utm_content=bufferad7ee&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer&#34;&gt;High-Performance JDBC by Vlad Mihalcea&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.thoughts-on-java.org/5-ways-to-initialize-lazy-relations-and-when-to-use-them/&#34;&gt;5 ways to initialize lazy relationsships and when to use them&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLmM51wkBlj0qPWAVylt-zsxAuZSXYMKNx&#34;&gt;infoShare 2016&lt;/a&gt; - videos&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RFstLZc_2y8&#34;&gt;Confitura 2016&lt;/a&gt; - video&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/exception-handling-in-real-life-applications?utm_content=buffer04b51&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer&#34;&gt;Exception Handling in Real-Life Java Applications&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.javaslang.io/&#34;&gt;Javaslang&lt;/a&gt; - functional library for Java 8+&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/junit-5-basics&#34;&gt;JUnit 5 - Basics&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://deltaspike.apache.org/&#34;&gt;Apache DeltaSpike&lt;/a&gt; - looking for something like Spring Data?&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://shipilev.net/blog/2016/close-encounters-of-jmm-kind/&#34;&gt;Close Encounters of The Java Memory Model Kind&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://jdk9.java.net/download/&#34;&gt;JDK™ 9 Early Access Releases&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://whatpulse.org/&#34;&gt;WhatPulse&lt;/a&gt; - all you need to know everything about your computing habits&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://puppet.com/resources/white-paper/2016-state-of-devops-report&#34;&gt;2016 State of DevOps Report&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://blog.codefx.org/java/dev/java-9-optional/&#34;&gt;Java 9 Additions To Optional&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://medium.com/chute-engineering/graphql-in-the-age-of-rest-apis-b10f2bf09bba#.ukkywcnhr&#34;&gt;GraphQL&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://medium.com/javascript-scene/what-is-webassembly-the-dawn-of-a-new-era-61256ec5a8f6#.h13t7bddd&#34;&gt;What is WebAssembly?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://cultureofdevelopment.com/blog/build-your-first-thing-with-web-assembly/&#34;&gt;Build Your First Thing With WebAssembly&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/mockbean-spring-boots-missing-ingredient?utm_content=buffer30136&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer&#34;&gt;@MockBean&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://gradle.org/videos/gradle-native-cc-adoption-package/&#34;&gt;Gradle Native C &amp; C++ Build Tool Guide&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/research/developer-survey-2016&#34;&gt;Stack Overflow Developer Survey Results &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.rust-lang.org/&#34;&gt;Rust Programming Language&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.haneycodes.net/npm-left-pad-have-we-forgotten-how-to-program/&#34;&gt;Left-pad npm Node.js Drama&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://appliedscala.com/blog/2016/scala-popularity/&#34;&gt;Analyzing Scala popularity&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://scala.epfl.ch/index.html#education&#34;&gt;Scala Center&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.lightbend.com/lagom&#34;&gt;Lightbend Lagom - Reactive Microservices&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3&#34;&gt;DevTools in Spring Boot 1.3 (LiveReload included)&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=A70NMxV13TI&#34;&gt;here &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://bottega.com.pl/artykuly-i-prezentacje&#34;&gt;Free IT Stuff from Bottega&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.javacodegeeks.com/2015/09/java-concurrency-essentials.html&#34;&gt;Java Concurrency Essentials Tutorial&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.javacodegeeks.com/2015/07/understanding-callable-and-spring-deferredresult.html&#34;&gt;Understanding Callable and Spring DeferredResult&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/holdenk/spark-testing-base&#34;&gt;Spark Testing Base&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/jakehschwartz/spring-boot-cucumber-example&#34;&gt;Spring Boot Cucumber Example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.javacodegeeks.com/2016/03/10-awesome-python-tutorials-kick-start-projects.html&#34;&gt;10 Awesome Python Tutorials to Kick-Start your Projects&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://medium.com/@msandin/strategies-for-organizing-code-2c9d690b6f33#.4utxbh7x7&#34;&gt;Four Strategies for Organizing Code&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UhG8rg_kyDE&#34;&gt;Jinkubator #41 - Kotlin - Paweł Byszewski&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://projectlombok.org/&#34;&gt;Project Lombok&lt;/a&gt; - small but nice tool&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=RpfQ8AHwEvg&#34;&gt;Hystrix - Managing failures in distributed systems&lt;/a&gt; - WJUG&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LrPBHADuGuw&amp;list=PLVbNBx5Phg3Ct6pIPeWpOW37OH7F8hcMO&amp;index=14&#34;&gt;RxJava &amp; Hystrix - perfect match for distributed applications&lt;/a&gt; - Confitura&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LCr3XyHdaZk&#34;&gt;Garbage Collector w pigułce&lt;/a&gt; - WJUG&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xx2-Snbb_nA&amp;list=PLVbNBx5Phg3Ct6pIPeWpOW37OH7F8hcMO&amp;index=19&#34;&gt;-XX:+UseG1GC&lt;/a&gt; - Confitura&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rWdgla54bcc&#34;&gt;JVM Internals&lt;/a&gt; - WJUG&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5xPLkUCHn5Y&#34;&gt;CompletableFuture i nie tylko – programowanie reaktywne w Javie&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://labs.unacast.com/2016/03/03/building-microservices-with-akka-http/&#34;&gt;Building microservices with Scala and akka-http&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/exploring-message-brokers&#34;&gt;Exploring Message Brokers&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://career.guru99.com/top-25-jms-java-message-service-interview-questions/&#34;&gt;Top 25 JMS (Java Message Service) Interview Questions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/35329845/difference-between-completablefuture-future-and-observable-rxjava&#34;&gt;Difference between completableFuture,Future and Observable Rxjava&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://confluence.jetbrains.com/display/IDEADEV/IDEA+16+EAP&#34;&gt;IntelliJ IDEA Early Access Program&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a class=&#34;title may-blank &#34; href=&#34;http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/&#34;&gt;Kotlin 1.0 Released&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/programming/comments/45wcnd/kotlin_10_released_pragmatic_language_for_jvm_and/&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://spring.io/blog/2016/02/16/reactor-2-5-a-second-generation-reactive-foundation-for-the-jvm&#34;&gt;Spring Reactor 2.5&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/profile-of-a-successful-java-developer-in-2016&#34;&gt;Profile of successful Java Developer in 2016&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://gingearstudio.com/why-i-quit-my-dream-job-at-ubisoft&#34;&gt;Why I Quit my Dream Job at Ubisoft&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/predictionio/sf-scala-dase2015-44112226&#34;&gt;PredictionIO&lt;/a&gt; – A Machine Learning Server in Scala&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/5693346/when-to-use-actors-instead-of-messaging-solutions-such-as-websphere-mq-or-tibco&#34;&gt;Actors or Messaging?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.gitkraken.com/&#34;&gt;GitKraken&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://nickcraver.com/blog/2016/02/17/stack-overflow-the-architecture-2016-edition/&#34;&gt;Stack Overflow: The Architecture&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/29018294/akka-events-between-local-and-remote-actors&#34;&gt;Scala: local &amp; remote actors&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLVbNBx5Phg3Ct6pIPeWpOW37OH7F8hcMO&#34;&gt;Confitura 2015 - movies&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLVT0blg4rCWAACyuDZKEn1cy1CR4zhz4R&#34;&gt;Boiling Frogs - movies&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC2coGyxf5x_CzJ3l4F-N-Sw/videos&#34;&gt;Warsaw JUG - movies&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCvj_1SWNU4diTM2Z2KCUHug/videos&#34;&gt;Wrocław JUG - movies&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/java/comments/3requx/javaone_2015_sessions/&#34;&gt;JavaOne 2015&lt;/a&gt; - sessions&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.syncfusion.com/resources/techportal/ebooks&#34;&gt;Free IT Ebooks&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://medium.com/free-stuff/2000-programming-resources-c2c835001216#.smkcn9bxs&#34;&gt;621+ Programming Resources&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://linkerd.io/&#34;&gt;linkerd.io&lt;/a&gt; - Modern RPC proxy for microservices&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.ybrikman.com/writing/2014/09/29/nodejs-vs-play-framework/&#34;&gt;Node.js vs Play Framework&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8z3h4Uv9YbE&#34;&gt;The Play Framework at LinkedIn: Productivity and Performance at Scale&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/java/comments/3requx/javaone_2015_sessions/&#34;&gt;JavaOne 2015 Sessions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/j1/&#34;&gt;Project Jigsaw @ JavaOne 2015&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cWD0a7f3YxY&amp;feature=youtu.be&amp;t=44s&#34;&gt;20th airhacks.tv Questions and Answers&lt;/a&gt; - Oracle Java Drama = just rumors&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koziolekweb.pl/2015/10/28/co-gdzie-kiedy-czyli-przyklad-refaktoryzacji-w-kierunku-fp/&#34;&gt;Przykład refaktoryzacji w kierunku FP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://gradle.org/maven_vs_gradle/&#34;&gt;Maven vs Gradle Feature Comparison&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1028858/useful-eclipse-java-code-templates&#34;&gt;Useful Eclipse Java Code Templates&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://javaconceptoftheday.com/most-asked-java-interview-programs-with-solutions/&#34;&gt;40 Most Asked Java Interview Programs With Solutions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://netbeans.org/community/releases/81/&#34;&gt;NetBeans 8.1 has been released&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.javacodegeeks.com/2015/06/5-features-in-java-9-that-will-change-how-you-develop-software-and-2-that-wont.html?      utm_content=buffer6db88&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer&#34;&gt;5 Features in Java 9 that WILL Change How You Develop Software (and 2 That Won’t)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://jaxenter.com/top-10-useful-yet-paranoid-java-programming-techniques-119498.html&#34;&gt;Top 10 useful, yet paranoid Java programming techniques&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.javacodegeeks.com/2015/08/java-8-se-optional-a-strict-approach.html&#34;&gt;Java 8 SE Optional&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.tutorialspoint.com/guava/guava_optional_class.htm&#34;&gt;Guava Optional&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.mkyong.com/java8/java-8-lambda-comparator-example/&#34;&gt;Java 8 Lambda : Comparator example&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.mkyong.com/java8/java-8-foreach-examples/&#34;&gt;Java 8 forEach examples&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.javacodegeeks.com/2015/01/get-your-advanced-java-programming-degree-with-these-tutorials-and-courses.html&#34;&gt;Bunch of Java Tutorials&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://jaxenter.com/7-java-performance-metrics-to-watch-after-a-major-release-120590.html&#34;&gt;7 Java performance metrics to watch after a major release&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://jaxenter.com/how-to-use-java-8-functional-programming-to-generate-an-alphabetic-sequence-120516.html&#34;&gt;Using Java 8 functional programming&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html&#34;&gt;Spring Framework - common application properties&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Bonus 1: &lt;a href=&#34;https://www.packtpub.com/packt/offers/free-learning&#34;&gt;Everyday free IT Ebook&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Bonus 2: &lt;a href=&#34;http://www.informationisbeautiful.net/visualizations/million-lines-of-code/&#34;&gt;Is a million lines of code a lot? :)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;How to pick programming language... &lt;a href=&#34;http://www.conowego.pl/fileadmin/redaktor_folder/news/2015/08/programowanie.jpg&#34;&gt;in USA&lt;/a&gt; ;)&lt;/li&gt;
    &lt;li&gt;Stack Overflow &lt;a href=&#34;http://stackoverflow.com/research/developer-survey-2015&#34;&gt;Developer Survey &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;New &lt;a href=&#34;http://programistamag.pl/programista-7-2015-38/&#34;&gt;ProgramistaMag&lt;/a&gt; 07/2015&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://sourceforge.net/projects/bugn.berlios/&#34;&gt;bug.n&lt;/a&gt; - tiling window manager for Windows&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://i3wm.org/&#34;&gt;i3wm&lt;/a&gt; and &lt;a href=&#34;http://awesome.naquadah.org/&#34;&gt;awesome&lt;/a&gt; - tiling window manager for Linux&lt;/li&gt;
    &lt;li&gt;Book &#34;&lt;a href=&#34;http://gynvael.coldwind.pl/?id=547&#34;&gt;Zrozumieć programowanie&lt;/a&gt;&#34; by Gynvael Coldwind - release Autumn 2015&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/conemu-maximus5/&#34;&gt;ConEmu&lt;/a&gt;, better command line for Windows&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/01org/acat/releases&#34;&gt;ACAT&lt;/a&gt; Assistive Context Aware Toolkit - Stephen Hawking&#39;s Speech Computer - Open Source&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.regexr.com/&#34;&gt;http://www.regexr.com/&lt;/a&gt; - nice online regex tool&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.javased.com/&#34;&gt;JavaSED&lt;/a&gt; - Java Code Examples&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;atom.io&lt;/a&gt; - text editor from GitHub for free (MIT licensed)&lt;/li&gt;
    &lt;li&gt;IT Ebooks for &lt;a href=&#34;https://www.syncfusion.com/resources/techportal/ebooks&#34;&gt;Free&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;New Eclipse, &lt;a href=&#34;https://projects.eclipse.org/releases/mars&#34;&gt;Mars&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;JUnit &lt;a href=&#34;http://carlosbecker.com/posts/junit-rules/&#34;&gt;Rules&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://modelmapper.org/&#34;&gt;ModelMapper&lt;/a&gt; library&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://wiki.fasterxml.com/JacksonJsonViews&#34;&gt;JSON Views &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://spring.io/blog/2013/07/03/spring-security-java-config-preview-web-security/&#34;&gt;Spring Security&lt;/a&gt; Tutorial&lt;/li&gt;
    &lt;li&gt;Check this &lt;a href=&#34;https://medium.com/@Kinmarui&#34;&gt;blog&lt;/a&gt; by Kinmarui&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>akka-http-slick-guice example</title>
      <link>https://kgoralski.github.io/post/akka-http-slick-guice/</link>
      <pubDate>Tue, 03 May 2016 08:41:23 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/akka-http-slick-guice/</guid>
      <description>&lt;p&gt;Forked from &lt;a href=&#34;https://github.com/knoldus/akka-http-slick&#34;&gt;https://github.com/knoldus/akka-http-slick&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changes:
&lt;ul&gt;
    &lt;li&gt;Guice added&lt;/li&gt;
    &lt;li&gt;Changed Routes to Get, Put, Post, Delete&lt;/li&gt;
    &lt;li&gt;Changed urls&lt;/li&gt;
    &lt;li&gt;Changed Json Parser from Lift to akka-http/Spray one&lt;/li&gt;
    &lt;li&gt;Some fixes&lt;/li&gt;
&lt;/ul&gt;
Check example here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.lightbend.com/activator/template/akka-http-slick-guice&#34;&gt;https://www.lightbend.com/activator/template/akka-http-slick-guice&lt;/a&gt;
&lt;a href=&#34;https://github.com/kgoralski/akka-http-slick-guice&#34;&gt;https://github.com/kgoralski/akka-http-slick-guice&lt;/a&gt;
&lt;ul&gt;
    &lt;li&gt;akka-http : REST&lt;/li&gt;
    &lt;li&gt;slick : database access &amp;amp; relational mapping&lt;/li&gt;
    &lt;li&gt;guice: dependency injection&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hystrix &amp; Spring Boot Configuration</title>
      <link>https://kgoralski.github.io/post/hystrix-springboot/</link>
      <pubDate>Mon, 28 Mar 2016 08:41:23 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/hystrix-springboot/</guid>
      <description>&lt;p&gt;Check this awesome &lt;a href=&#34;https://youtu.be/RpfQ8AHwEvg&#34;&gt;video&lt;/a&gt;. Below you can find how to configure Hystrix with Spring Boot 1.1.8 with Spring Cloud Hystrix Starter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile &#39;org.springframework.cloud:spring-cloud-starter-hystrix:1.0.0.RELEASE&#39; for Spring Boot 1.1.8.
@EnableCircuitBreaker on Main/Runner class
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Register Hystrix Servlet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
public class HystrixServletDefinitions {

       @Bean(name = &amp;quot;hystrixRegistrationBean&amp;quot;)
       public ServletRegistrationBean servletRegistrationBean() {
             ServletRegistrationBean registration = new ServletRegistrationBean(
                           new HystrixMetricsStreamServlet(), &amp;quot;/metrics/hystrix.stream&amp;quot;);
             registration.setName(&amp;quot;hystrixServlet&amp;quot;);
             registration.setLoadOnStartup(1);
             return registration;
       }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Add it to Spring Security if needed: .antMatchers(&amp;ldquo;/metrics/hystrix.stream&amp;rdquo;).permitAll()&lt;/li&gt;
&lt;li&gt;Create config.properties file like this  + check docs&lt;/li&gt;
&lt;li&gt;Create defaultMethod which will be used when CircuitBreaker will open:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;SampleObject&amp;gt; defaultMethod() {
             return Lists.newArrayList();
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use annotation where you want to use it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@HystrixCommand(fallbackMethod = &amp;quot;defaultMethod&amp;quot;)
       public List&amp;lt;SampleObject&amp;gt; getRealMethod() {
             // implementation...
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want cool Dashboard? Get and deploy somewhere Hystrix-Dashboard.war and target our &amp;ldquo;/metrics/hystrix.stream&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RxJava Async Rest Calls</title>
      <link>https://kgoralski.github.io/post/rxjava-async/</link>
      <pubDate>Sat, 26 Mar 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/rxjava-async/</guid>
      <description>&lt;p&gt;I’m not really sure if the code snippet below is 100% correct… Schedulers.io() is not probably the way to go ;)
I wanted to try RxJava for two Async Rest Calls with blocking at the end.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.rx.java.tutorial;
 
import java.util.List;
 
 
import rx.Observable;
import rx.functions.Func2;
import rx.schedulers.Schedulers;
 
public class App {
 
    public static void main(String[] args) {
        List&amp;lt;Person&amp;gt; zipped = Observable
                .zip(getObservableName(), getObservableAge(), new Func2&amp;lt;String, Integer, Person&amp;gt;() {
 
                    @Override
                    public Person call(String name, Integer age) {
                        Person person = new Person();
                        person.setName(name);
                        person.setAge(age);
                        return person;
                    }
                }).toList().toBlocking().single();
 
        zipped.stream().forEach(person -&amp;gt; {
            System.out.println(&amp;quot;[Name : &amp;quot; + person.getName() + &amp;quot;, Age : &amp;quot; + person.getAge() + &amp;quot;]&amp;quot;);
            // [Name : Maciek, Age : 18]
            // [Name : Rysiek, Age : 20]
            // [Name : Zdzichu, Age : 45]
        });
    }
 
    // Rest Call simulation,  emits entries of Lists.newArrayList(&amp;quot;Maciek&amp;quot;, &amp;quot;Rysiek&amp;quot;, &amp;quot;Zdzichu&amp;quot;);
    private static Observable&amp;lt;String&amp;gt; getObservableName() {
        return Observable.from(RestService.getNames()).subscribeOn(Schedulers.io());
 
    }
    // Rest Call simulation,  emits entries of Lists.newArrayList(18, 20, 45);
    private static Observable&amp;lt;Integer&amp;gt; getObservableAge() {
        return Observable.from(RestService.getAges()).subscribeOn(Schedulers.io());
 
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Spring &amp; Guava Cache</title>
      <link>https://kgoralski.github.io/post/spring-guava-cache/</link>
      <pubDate>Wed, 09 Mar 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/spring-guava-cache/</guid>
      <description>&lt;p&gt;Check the excellent guide &lt;a href=&#34;http://codedevstuff.blogspot.com/2015/07/add-guava-cache-to-spring-boot-to-cache.html&#34;&gt;here&lt;/a&gt; about Cache in Spring. Below you can find similar code. Also check the official &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// compile (&#39;org.springframework:spring-context-support:4.0.7.RELEASE&#39;)
@Configuration
@EnableCaching
public class CacheConfig implements CachingConfigurer {
 
    public final static String CACHE = &amp;quot;cache&amp;quot;;
 
    private static final Logger LOGGER = LoggerFactory.getLogger(CacheConfig.class);
 
    @Bean
    @Override
    public CacheManager cacheManager() {
        LOGGER.info(&amp;quot;Initializing simple Guava Cache manager.&amp;quot;);
        SimpleCacheManager cacheManager = new SimpleCacheManager();
        GuavaCache discoveryCache = new GuavaCache(CACHE,
                CacheBuilder.newBuilder().expireAfterWrite(60, TimeUnit.MINUTES).build());
        cacheManager.setCaches(Arrays.asList(discoveryCache));
        return cacheManager;
    }
 
    @Bean
    @Override
    public KeyGenerator keyGenerator() {
        return new SimpleKeyGenerator();
    }
 
}
// mark method with @Cacheable annotation
@Component
public class CacheService {
 
    @Inject
    private BooksService bookService;
 
    @Cacheable(CacheConfig.CACHE)
    public List&amp;lt;Book&amp;gt; getBooks() {
        return bookService.getBooks();
    }
}
 
// You can clear cache like this
@Controller
@RequestMapping(&amp;quot;/&amp;quot;)
public class ClearCacheController {
 
    @CacheEvict(value = CacheConfig.CACHE, allEntries = true)
    @RequestMapping(value = &amp;quot;/clearCache&amp;quot;, method = RequestMethod.GET)
    public ResponseEntity&amp;lt;String&amp;gt; clearCache() {
        return new ResponseEntity&amp;lt;String&amp;gt;(&amp;quot;Cache Cleared&amp;quot;, HttpStatus.OK);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>RxJava Basics</title>
      <link>https://kgoralski.github.io/post/rxjava-basics/</link>
      <pubDate>Sun, 28 Feb 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/rxjava-basics/</guid>
      <description>&lt;p&gt;Inspired by &lt;a href=&#34;http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/&#34;&gt;Grokking RxJava Tutorial&lt;/a&gt; check the code snippet below, in this post or check it here &lt;a href=&#34;http://pastebin.com/9MR4k5E5&#34;&gt;http://pastebin.com/9MR4k5E5&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.rx.java.tutorial;

import java.util.ArrayList;
import java.util.List;

import rx.Observable;
import rx.Subscriber;
import rx.functions.Func1;

public class Main {

	// Check this tutorial:
	// http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/

	// Dependency for gradle project:
	// compile &#39;io.reactivex:rxjava:1.1.1&#39;

	// ====================================================================

	// Key idea #1: Observable and Subscriber can do anything.

	// Key idea #2: The Observable and Subscriber are independent of the
	// transformational steps in between them.

	// Key idea #3: Operators let you do anything to the stream of data. The
	// only limit is yourself.

	// ====================================================================

	// Notes:
	// 1. onError() is called if an Exception is thrown at any time.
	// 2. The operators don&#39;t have to handle the Exception.
	// 3. You know when the Subscriber has finished receiving items.
	// 4. When you call Observable.subscribe(), it returns a Subscription.
	// 5. RxJava has awesome docs / marble diagrams inside code
	// 6. using unsubscribe will terminate wherever it is currently executing
	// code
	// 7. List of operators:
	// https://github.com/ReactiveX/RxJava/wiki/Alphabetical-List-of-Observable-Operators

	public static void main(String[] args) {

		// 1. verbose example
		Observable&amp;lt;String&amp;gt; myObservable = Observable.create(new Observable.OnSubscribe&amp;lt;String&amp;gt;() {
			public void call(Subscriber&amp;lt;? super String&amp;gt; sub) {
				sub.onNext(extracted());
				sub.onCompleted();
			}

			private String extracted() {
				return &amp;quot;1. Hello, world!&amp;quot;;
			}
		});

		Subscriber&amp;lt;String&amp;gt; mySubscriber = new Subscriber&amp;lt;String&amp;gt;() {
			public void onCompleted() {
				System.out.println(&amp;quot;1. the end&amp;quot;);
			}

			public void onError(Throwable e) {
				System.out.println(&amp;quot;error&amp;quot;);
			}

			public void onNext(String s) {
				System.out.println(s);
			}
		};
		myObservable.subscribe(mySubscriber);

		// 2. almost same thing as above
		Observable.just(&amp;quot;2. Hello, world!&amp;quot;).subscribe(s -&amp;gt; System.out.println(s + &amp;quot;-Krzysztof&amp;quot;));

		// 3. map operator - transforming
		Observable.just(&amp;quot;3. Hello, world!&amp;quot;).map(s -&amp;gt; s + &amp;quot;-Krzysztof&amp;quot;)
				.subscribe(s -&amp;gt; System.out.println(s));
				// http://reactivex.io/documentation/operators/map.html

		// 4. subscriber receive Integer
		Observable.just(&amp;quot;4. Hello, world!&amp;quot;).map(s -&amp;gt; s.hashCode())
				.subscribe(i -&amp;gt; System.out.println(&amp;quot;4. &amp;quot; + Integer.toString(i)));

		// 5. subscriber shouldn&#39;t have much logic so...
		Observable.just(&amp;quot;5. Hello, world!&amp;quot;).map(s -&amp;gt; s.hashCode()).map(i -&amp;gt; Integer.toString(i))
				.subscribe(s -&amp;gt; System.out.println(&amp;quot;5. &amp;quot; + s));

		// 6. some transformations
		Observable.just(&amp;quot;6. Hello, world!&amp;quot;).map(s -&amp;gt; s + &amp;quot; -Krzysztof&amp;quot;).map(s -&amp;gt; s.hashCode())
				.map(i -&amp;gt; Integer.toString(i)).subscribe(s -&amp;gt; System.out.println(&amp;quot;6. &amp;quot; + s));

		List&amp;lt;String&amp;gt; arrayList = new ArrayList&amp;lt;String&amp;gt;();
		arrayList.add(&amp;quot;Krzysztof&amp;quot;);
		arrayList.add(&amp;quot;Karol&amp;quot;);
		arrayList.add(&amp;quot;Irek&amp;quot;);

		// 7. from operator emits one element each time
		Observable.just(arrayList).subscribe(names -&amp;gt; {
			Observable.from(names).subscribe(name -&amp;gt; System.out.println(&amp;quot;7. Name: &amp;quot; + name));
		});
		// http://reactivex.io/documentation/operators/from.html

		// 8. list observable transformed into observable which emits single
		// result with after change name, filtering and taking entry at the end
		Observable.just(arrayList).flatMap(names -&amp;gt; Observable.from(names))
				.flatMap(name -&amp;gt; Observable.just(name + &amp;quot; is awesome&amp;quot;))
				.filter(nameChange -&amp;gt; !&amp;quot;Karol is awesome&amp;quot;.equals(nameChange)).take(1)
				.subscribe(result -&amp;gt; System.out.println(&amp;quot;8. &amp;quot; + result + &amp;quot;- this is the result&amp;quot;));
				// http://reactivex.io/documentation/operators/flatmap.html

		// 9. doOnNext() allows us to add extra behavior each time an item is
		// emitted, in this case singing &#39;lalala&#39;
		Observable.just(arrayList).flatMap(names -&amp;gt; Observable.from(names))
				.flatMap(name -&amp;gt; Observable.just(name + &amp;quot; is awesome&amp;quot;))
				.filter(nameChange -&amp;gt; !&amp;quot;Irek is awesome&amp;quot;.equals(nameChange)).take(1)
				.doOnNext(nameChange -&amp;gt; System.out.println(&amp;quot;9. lalalla&amp;quot;))
				.subscribe(result -&amp;gt; System.out.println(&amp;quot;9. &amp;quot; + result + &amp;quot;- this is the result&amp;quot;));
				// http://reactivex.io/documentation/operators/filter.html
				// http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnNext(rx.functions.Action1)

		// 10. error example
		Observable.just(arrayList).flatMap(names -&amp;gt; Observable.from(names))
				.flatMap(name -&amp;gt; Observable.just(name + &amp;quot; is awesome&amp;quot;))
				.filter(nameChange -&amp;gt; getError(nameChange).equals(&amp;quot;anything&amp;quot;)).take(1)
				.doOnNext(nameChange -&amp;gt; System.out.println(&amp;quot;10. lalalla&amp;quot;))
				.onErrorReturn(new Func1&amp;lt;Throwable, String&amp;gt;() {
					@Override
					public String call(Throwable t) {
						return &amp;quot;error&amp;quot;;
					}
				})
				.subscribe(result -&amp;gt; System.out.println(&amp;quot;10. &amp;quot; + result + &amp;quot; - this is the result&amp;quot;));

		// 11. Schedulers: easy threading
		// myObservableServices.retrieveImage(url)
		// .subscribeOn(Schedulers.io())
		// .observeOn(AndroidSchedulers.mainThread())
		// .subscribe(bitmap -&amp;gt; myImageView.setImageBitmap(bitmap));

		// subscribeOn(Scheduler scheduler): Asynchronously subscribes Observers
		// to this Observable on the specified Scheduler.

		// observeOn(Scheduler scheduler): Modifies an Observable to perform its
		// emissions and notifications on a specified Scheduler, asynchronously
		// with a bounded buffer.

		// check: http://reactivex.io/documentation/operators/subscribeon.html

	}

	private static String getError(String name) {
		throw new RuntimeException();
	}

	// OUTPUT:
	// 1. Hello, world!
	// 1. the end
	// 2. Hello, world!-Krzysztof
	// 3. Hello, world!-Krzysztof
	// 4. -1028118321
	// 5. -1538652498
	// 6. -1846029788
	// 7. Name: Krzysztof
	// 7. Name: Karol
	// 7. Name: Irek
	// 8. Krzysztof is awesome- this is the result
	// 9. lalalla
	// 9. Krzysztof is awesome- this is the result
	// 10. error - this is the result

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Reactive Programming - Learning Resources</title>
      <link>https://kgoralski.github.io/post/reactive-resources/</link>
      <pubDate>Fri, 19 Feb 2016 08:41:23 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/reactive-resources/</guid>
      <description>&lt;ol&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.reactivemanifesto.org/&#34;&gt;Manifesto&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&#34;&gt;Nice article about Reactive Programming&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;Rx marbles &lt;/a&gt; - diagrams (better than docs)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://reactivex.io/&#34;&gt;http://reactivex.io/&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://reactivex.io/tutorials.html&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=BujWQSjtpl&#34;&gt;Fast Overview&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=_t06LRX0DV0&#34;&gt;Reactive Programming with RxJava (Netflix)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aEuNBk1b5OE#t=2480&#34;&gt;Meetup with Netflix&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=J8n8j0_6wYU&amp;list=PLVT0blg4rCWAACyuDZKEn1cy1CR4zhz4R&amp;index=13&#34;&gt;Reactive Streams (Akka + JS)&lt;/a&gt; - Boiling Frogs 2016 (PL)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LrPBHADuGuw&amp;list=PLVbNBx5Phg3Ct6pIPeWpOW37OH7F8hcMO&amp;index=14&#34;&gt;RxJava &amp; Hystrix&lt;/a&gt; -  Confitura 2015 (PL)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-are-the-main-differences-between-Akka-and-RxJava&#34;&gt;RxJava vs Akka&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/&#34;&gt;Grokking RxJava &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/Froussios/Intro-To-RxJava&#34;&gt;Intro to RxJava&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/reactive&#34;&gt;Principles of Reactive Programming&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/rxjava-part-1-a-quick-introduction&#34;&gt;A Quick Introduction to RxJava&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxJava/wiki/Additional-Reading&#34;&gt;Additional Reading&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>