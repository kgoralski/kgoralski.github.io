<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Krzysztof Góralski</title>
    <link>https://kgoralski.github.io/index.xml</link>
    <description>Recent content on Krzysztof Góralski</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>[Krzysztof Góralski](https://kgoralski.github.io/). Released under the MIT license&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <lastBuildDate>Sun, 04 Sep 2016 10:35:47 +0100</lastBuildDate>
    <atom:link href="https://kgoralski.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Go Language - First Impressions</title>
      <link>https://kgoralski.github.io/post/go-impressions/</link>
      <pubDate>Sun, 04 Sep 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/go-impressions/</guid>
      <description>&lt;p&gt;Just wrote something small with Go Language. Simple CRUD/webservice with MySQL using gorilla mux and sqlx, but it is almost plain golang in dockerized environment. If anything wrong about it, tell me. If you know polish language you can check also this link: &lt;a href=&#34;http://www.consdata.pl/blog/12-pirewsze-kroki-z-golang&#34;&gt;http://www.consdata.pl/blog/12-pirewsze-kroki-z-golang&lt;/a&gt; ;)&lt;/p&gt;

&lt;p&gt;Here are my impressions about it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it feels pragmatic from the beginning&lt;/li&gt;
&lt;li&gt;probably you don’t need any frameworks at all to use it&lt;/li&gt;
&lt;li&gt;simpler = better, simplicity as a feature&lt;/li&gt;
&lt;li&gt;quite easy to write REST application&lt;/li&gt;
&lt;li&gt;the build in package manager ‘go get’ is cool thing&lt;/li&gt;
&lt;li&gt;compilation &amp;amp; running time of go server is much faster than java&lt;/li&gt;
&lt;li&gt;it doesn’t eat much of resources&lt;/li&gt;
&lt;li&gt;you can use many text editors or IDEs for it (IntelliJ has Go Plugin)&lt;/li&gt;
&lt;li&gt;gofmt – one and the only code formatter&lt;/li&gt;
&lt;li&gt;designed for special needs, not for everything&lt;/li&gt;
&lt;li&gt;it is easy to find examples by googling it, good enough community&lt;/li&gt;
&lt;li&gt;return multiple values from Go functions – nice feature&lt;/li&gt;
&lt;li&gt;syntax not beautiful like Python but still good&lt;/li&gt;
&lt;li&gt;the build in ‘testing’ package – ok, but too simple (testify looks better)&lt;/li&gt;
&lt;li&gt;concurrency – believe that it is nice, but didn’t tried it yet&lt;/li&gt;
&lt;li&gt;it is much different than Scala – complexity vs simplicity&lt;/li&gt;
&lt;li&gt;I think that I could be very productive with Go if i will get used to it&lt;/li&gt;
&lt;li&gt;Docker, Kubernetes, CoreOs,  Consul, Flynn, Lime, Google, Dropbox…&lt;/li&gt;
&lt;li&gt;heard that golang is good for ‘real time apps’ – want to try it soon&lt;/li&gt;
&lt;li&gt;it seems to be good for building command-line tools&lt;/li&gt;
&lt;li&gt;it is different than Java, little bit tricky at beginning, but easy to start ;)&lt;/li&gt;
&lt;li&gt;‘good when you need to write something yourself instead of using library’&lt;/li&gt;
&lt;li&gt;need to find idea for real project, because I kinda like Go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Links:
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://danmux.com/posts/what_golang_isnt/&#34;&gt;What Golang Is and Is Not&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://jimplush.com/talk/2015/12/19/moving-a-team-from-scala-to-golang/&#34;&gt;Moving a team from Scala to Golang&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/&#34;&gt;Handling 1 Million Requests per Minute with Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://text.sourcegraph.com/google-i-o-talk-building-sourcegraph-a-large-scale-code-search-cross-reference-engine-in-go-1f911b78a82e#.jd729lgy5&#34;&gt;Sourcegraph, a large-scale code search &amp;amp; cross-reference engine in Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b#.o6e4uex72&#34;&gt;Farewell Node.js - Leaving node.js land for Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://hashrocket.com/blog/posts/websocket-shootout&#34;&gt;Websocket Shootout: Clojure, C++, Elixir, Go, NodeJS, and Ruby&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JOx9enktnUM&#34;&gt;Go at Dropbox&lt;/a&gt; and &lt;a href=&#34;https://www.bigmarker.com/remote-meetup-go/Go-at-Dropbox&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/jpetazzo/docker-and-go-why-did-we-decide-to-write-docker-in-go&#34;&gt;Here&amp;rsquo;s Why Docker Was Written in Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/appleboy/write-microservice-in-golang&#34;&gt;Write microservice in golang&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://zduck.com/2014/go-and-package-versioning/&#34;&gt;Go and Package Versioning&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://allegro.tech/2016/03/writing-fast-cache-service-in-go.html&#34;&gt;allegro.tech - Writing a cache service with millions of entries in Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://eng.uber.com/go-geofence/&#34;&gt;Uber &amp;amp; Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/faq#What%5Fis%5Fthe%5Fpurpose%5Fof%5Fthe%5Fproject&#34;&gt;What is the purpose of Go project?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/GoUsers&#34;&gt;GoUsers&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.itjobswatch.co.uk/jobs/uk/go.do&#34;&gt;Go UK Jobs Watch&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.indeed.com/jobtrends/q-golang.html&#34;&gt;indeed job trends&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-is-the-future-of-the-Go-programming-language&#34;&gt;What is the future of the Go programming language?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.quora.com/Why-is-the-programming-language-GO-getting-so-popular-lately&#34;&gt;Why is the programming language GO getting so popular lately?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://blog.ralch.com/tutorial/golang-performance-and-memory-analysis/&#34;&gt;Performance and memory analysis of Golang programs&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.savethecode.com/racing-day-web-frameworks/&#34;&gt;Web Frameworks Benchmarks&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://opencredo.com/java-go-back/&#34;&gt;From Java to Go, and Back Again&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/golang/comments/579wsk/from_java_to_go_and_back_again/?&#34;&gt;community reaction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Univocity Parsers Library</title>
      <link>https://kgoralski.github.io/post/univocity-parsers/</link>
      <pubDate>Thu, 25 Aug 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/univocity-parsers/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.univocity.com/&#34;&gt;Official Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/com.univocity/univocity-parsers&#34;&gt;Maven Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below you can find how to parse .csv file with univocity library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ExampleCsvToPojoParser {
   
    private final Logger logger = LoggerFactory.getLogger(CsvToPojoParser.class);
   
    public &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; parseFileToPojo(Class&amp;lt;T&amp;gt; clazz, String fileName) {
   
        BeanListProcessor&amp;lt;T&amp;gt; rowProcessor = new BeanListProcessor&amp;lt;T&amp;gt;(clazz);
   
        CsvParserSettings parserSettings = new CsvParserSettings();
   
        parserSettings.setRowProcessor(rowProcessor);
        parserSettings.setHeaderExtractionEnabled(true);
        parserSettings.setLineSeparatorDetectionEnabled(true);
        parserSettings.setSkipEmptyLines(true);
   
        CsvParser parser = new CsvParser(parserSettings);
        try (InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream(fileName)) {
            parser.parse(resourceAsStream);
        } catch (IOException e) {
            logger.error(&amp;quot;Cannot read file &amp;quot; + fileName, e );
        }
        return rowProcessor.getBeans();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can put there class like this (which will match the file):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Users {
   
    @Trim
    @NullString(nulls = { &amp;quot; &amp;quot;, &amp;quot;&amp;quot; })
    @Parsed(field = &amp;quot;USER_ID&amp;quot;)
    private Long userId;
    @Trim
    @NullString(nulls = { &amp;quot; &amp;quot;, &amp;quot;&amp;quot; })
    @Parsed(field = &amp;quot;USER_NAME&amp;quot;)
    private String userName;
    //getters &amp;amp; setters
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>My programming books</title>
      <link>https://kgoralski.github.io/post/books/</link>
      <pubDate>Sun, 31 Jul 2016 08:41:23 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/books/</guid>
      <description>&lt;p&gt;My current, unordered book list but I wasn’t able to read them all, yet.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Core Java, Volume I and II; Horstmann&lt;/li&gt;
&lt;li&gt;Thinking in Java; Eckel&lt;/li&gt;
&lt;li&gt;OCA/OCP Java SE 7 Programmer I &amp;amp; II Study Guide; Sierra &amp;amp; Bates&lt;/li&gt;
&lt;li&gt;Effective Java; Bloch&lt;/li&gt;
&lt;li&gt;Java Concurrency in Practice; Goetz&lt;/li&gt;
&lt;li&gt;Spring Boot in Action; Walls&lt;/li&gt;
&lt;li&gt;Java EE 7 Development with WildFly; Ćmil, Matłoka, Marchioni&lt;/li&gt;
&lt;li&gt;The C Programming Language; Kernighan, Ritchie&lt;/li&gt;
&lt;li&gt;The C++ Programming Language; Stroustrup&lt;/li&gt;
&lt;li&gt;Effective Modern C++; Meyers&lt;/li&gt;
&lt;li&gt;Learning Python: Powerful Object-Oriented Programming; Lutz&lt;/li&gt;
&lt;li&gt;Scala for the Impatient; Horstmann&lt;/li&gt;
&lt;li&gt;Functional Programming in Scala; Chiusano, Bjarnason&lt;/li&gt;
&lt;li&gt;Seven Languages in Seven Weeks, Tate&lt;/li&gt;
&lt;li&gt;Algorithms Unlocked, Cormen&lt;/li&gt;
&lt;li&gt;Introduction to Algorithms, Cormen&lt;/li&gt;
&lt;li&gt;Design Patterns; Gang of Four&lt;/li&gt;
&lt;li&gt;Head First, Design Patterns; Sierra, Robson, Bates &amp;amp; Freeman&lt;/li&gt;
&lt;li&gt;Clean Code; Martin&lt;/li&gt;
&lt;li&gt;The Pragmatic Programmer; Hunt&lt;/li&gt;
&lt;li&gt;The Software Craftsman: Professionalism, Pragmatism, Pride; Mancuso&lt;/li&gt;
&lt;li&gt;The Go Programming Language, Donovan &amp;amp; Kernighan&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Spring &amp; Guava Cache</title>
      <link>https://kgoralski.github.io/post/spring-guava-cache/</link>
      <pubDate>Wed, 09 Mar 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/spring-guava-cache/</guid>
      <description>&lt;p&gt;Check the excellent guide &lt;a href=&#34;http://codedevstuff.blogspot.com/2015/07/add-guava-cache-to-spring-boot-to-cache.html&#34;&gt;here&lt;/a&gt; about Cache in Spring. Below you can find similar code. Also check the official &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// compile (&#39;org.springframework:spring-context-support:4.0.7.RELEASE&#39;)
@Configuration
@EnableCaching
public class CacheConfig implements CachingConfigurer {
 
    public final static String CACHE = &amp;quot;cache&amp;quot;;
 
    private static final Logger LOGGER = LoggerFactory.getLogger(CacheConfig.class);
 
    @Bean
    @Override
    public CacheManager cacheManager() {
        LOGGER.info(&amp;quot;Initializing simple Guava Cache manager.&amp;quot;);
        SimpleCacheManager cacheManager = new SimpleCacheManager();
        GuavaCache discoveryCache = new GuavaCache(CACHE,
                CacheBuilder.newBuilder().expireAfterWrite(60, TimeUnit.MINUTES).build());
        cacheManager.setCaches(Arrays.asList(discoveryCache));
        return cacheManager;
    }
 
    @Bean
    @Override
    public KeyGenerator keyGenerator() {
        return new SimpleKeyGenerator();
    }
 
}
// mark method with @Cacheable annotation
@Component
public class CacheService {
 
    @Inject
    private BooksService bookService;
 
    @Cacheable(CacheConfig.CACHE)
    public List&amp;lt;Book&amp;gt; getBooks() {
        return bookService.getBooks();
    }
}
 
// You can clear cache like this
@Controller
@RequestMapping(&amp;quot;/&amp;quot;)
public class ClearCacheController {
 
    @CacheEvict(value = CacheConfig.CACHE, allEntries = true)
    @RequestMapping(value = &amp;quot;/clearCache&amp;quot;, method = RequestMethod.GET)
    public ResponseEntity&amp;lt;String&amp;gt; clearCache() {
        return new ResponseEntity&amp;lt;String&amp;gt;(&amp;quot;Cache Cleared&amp;quot;, HttpStatus.OK);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>RxJava Basics</title>
      <link>https://kgoralski.github.io/post/rxjava-basics/</link>
      <pubDate>Sun, 28 Feb 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/rxjava-basics/</guid>
      <description>&lt;p&gt;Inspired by &lt;a href=&#34;http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/&#34;&gt;Grokking RxJava Tutorial&lt;/a&gt; check the code snippet below, in this post or check it here &lt;a href=&#34;http://pastebin.com/9MR4k5E5&#34;&gt;http://pastebin.com/9MR4k5E5&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.rx.java.tutorial;

import java.util.ArrayList;
import java.util.List;

import rx.Observable;
import rx.Subscriber;
import rx.functions.Func1;

public class Main {

	// Check this tutorial:
	// http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/

	// Dependency for gradle project:
	// compile &#39;io.reactivex:rxjava:1.1.1&#39;

	// ====================================================================

	// Key idea #1: Observable and Subscriber can do anything.

	// Key idea #2: The Observable and Subscriber are independent of the
	// transformational steps in between them.

	// Key idea #3: Operators let you do anything to the stream of data. The
	// only limit is yourself.

	// ====================================================================

	// Notes:
	// 1. onError() is called if an Exception is thrown at any time.
	// 2. The operators don&#39;t have to handle the Exception.
	// 3. You know when the Subscriber has finished receiving items.
	// 4. When you call Observable.subscribe(), it returns a Subscription.
	// 5. RxJava has awesome docs / marble diagrams inside code
	// 6. using unsubscribe will terminate wherever it is currently executing
	// code
	// 7. List of operators:
	// https://github.com/ReactiveX/RxJava/wiki/Alphabetical-List-of-Observable-Operators

	public static void main(String[] args) {

		// 1. verbose example
		Observable&amp;lt;String&amp;gt; myObservable = Observable.create(new Observable.OnSubscribe&amp;lt;String&amp;gt;() {
			public void call(Subscriber&amp;lt;? super String&amp;gt; sub) {
				sub.onNext(extracted());
				sub.onCompleted();
			}

			private String extracted() {
				return &amp;quot;1. Hello, world!&amp;quot;;
			}
		});

		Subscriber&amp;lt;String&amp;gt; mySubscriber = new Subscriber&amp;lt;String&amp;gt;() {
			public void onCompleted() {
				System.out.println(&amp;quot;1. the end&amp;quot;);
			}

			public void onError(Throwable e) {
				System.out.println(&amp;quot;error&amp;quot;);
			}

			public void onNext(String s) {
				System.out.println(s);
			}
		};
		myObservable.subscribe(mySubscriber);

		// 2. almost same thing as above
		Observable.just(&amp;quot;2. Hello, world!&amp;quot;).subscribe(s -&amp;gt; System.out.println(s + &amp;quot;-Krzysztof&amp;quot;));

		// 3. map operator - transforming
		Observable.just(&amp;quot;3. Hello, world!&amp;quot;).map(s -&amp;gt; s + &amp;quot;-Krzysztof&amp;quot;)
				.subscribe(s -&amp;gt; System.out.println(s));
				// http://reactivex.io/documentation/operators/map.html

		// 4. subscriber receive Integer
		Observable.just(&amp;quot;4. Hello, world!&amp;quot;).map(s -&amp;gt; s.hashCode())
				.subscribe(i -&amp;gt; System.out.println(&amp;quot;4. &amp;quot; + Integer.toString(i)));

		// 5. subscriber shouldn&#39;t have much logic so...
		Observable.just(&amp;quot;5. Hello, world!&amp;quot;).map(s -&amp;gt; s.hashCode()).map(i -&amp;gt; Integer.toString(i))
				.subscribe(s -&amp;gt; System.out.println(&amp;quot;5. &amp;quot; + s));

		// 6. some transformations
		Observable.just(&amp;quot;6. Hello, world!&amp;quot;).map(s -&amp;gt; s + &amp;quot; -Krzysztof&amp;quot;).map(s -&amp;gt; s.hashCode())
				.map(i -&amp;gt; Integer.toString(i)).subscribe(s -&amp;gt; System.out.println(&amp;quot;6. &amp;quot; + s));

		List&amp;lt;String&amp;gt; arrayList = new ArrayList&amp;lt;String&amp;gt;();
		arrayList.add(&amp;quot;Krzysztof&amp;quot;);
		arrayList.add(&amp;quot;Karol&amp;quot;);
		arrayList.add(&amp;quot;Irek&amp;quot;);

		// 7. from operator emits one element each time
		Observable.just(arrayList).subscribe(names -&amp;gt; {
			Observable.from(names).subscribe(name -&amp;gt; System.out.println(&amp;quot;7. Name: &amp;quot; + name));
		});
		// http://reactivex.io/documentation/operators/from.html

		// 8. list observable transformed into observable which emits single
		// result with after change name, filtering and taking entry at the end
		Observable.just(arrayList).flatMap(names -&amp;gt; Observable.from(names))
				.flatMap(name -&amp;gt; Observable.just(name + &amp;quot; is awesome&amp;quot;))
				.filter(nameChange -&amp;gt; !&amp;quot;Karol is awesome&amp;quot;.equals(nameChange)).take(1)
				.subscribe(result -&amp;gt; System.out.println(&amp;quot;8. &amp;quot; + result + &amp;quot;- this is the result&amp;quot;));
				// http://reactivex.io/documentation/operators/flatmap.html

		// 9. doOnNext() allows us to add extra behavior each time an item is
		// emitted, in this case singing &#39;lalala&#39;
		Observable.just(arrayList).flatMap(names -&amp;gt; Observable.from(names))
				.flatMap(name -&amp;gt; Observable.just(name + &amp;quot; is awesome&amp;quot;))
				.filter(nameChange -&amp;gt; !&amp;quot;Irek is awesome&amp;quot;.equals(nameChange)).take(1)
				.doOnNext(nameChange -&amp;gt; System.out.println(&amp;quot;9. lalalla&amp;quot;))
				.subscribe(result -&amp;gt; System.out.println(&amp;quot;9. &amp;quot; + result + &amp;quot;- this is the result&amp;quot;));
				// http://reactivex.io/documentation/operators/filter.html
				// http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnNext(rx.functions.Action1)

		// 10. error example
		Observable.just(arrayList).flatMap(names -&amp;gt; Observable.from(names))
				.flatMap(name -&amp;gt; Observable.just(name + &amp;quot; is awesome&amp;quot;))
				.filter(nameChange -&amp;gt; getError(nameChange).equals(&amp;quot;anything&amp;quot;)).take(1)
				.doOnNext(nameChange -&amp;gt; System.out.println(&amp;quot;10. lalalla&amp;quot;))
				.onErrorReturn(new Func1&amp;lt;Throwable, String&amp;gt;() {
					@Override
					public String call(Throwable t) {
						return &amp;quot;error&amp;quot;;
					}
				})
				.subscribe(result -&amp;gt; System.out.println(&amp;quot;10. &amp;quot; + result + &amp;quot; - this is the result&amp;quot;));

		// 11. Schedulers: easy threading
		// myObservableServices.retrieveImage(url)
		// .subscribeOn(Schedulers.io())
		// .observeOn(AndroidSchedulers.mainThread())
		// .subscribe(bitmap -&amp;gt; myImageView.setImageBitmap(bitmap));

		// subscribeOn(Scheduler scheduler): Asynchronously subscribes Observers
		// to this Observable on the specified Scheduler.

		// observeOn(Scheduler scheduler): Modifies an Observable to perform its
		// emissions and notifications on a specified Scheduler, asynchronously
		// with a bounded buffer.

		// check: http://reactivex.io/documentation/operators/subscribeon.html

	}

	private static String getError(String name) {
		throw new RuntimeException();
	}

	// OUTPUT:
	// 1. Hello, world!
	// 1. the end
	// 2. Hello, world!-Krzysztof
	// 3. Hello, world!-Krzysztof
	// 4. -1028118321
	// 5. -1538652498
	// 6. -1846029788
	// 7. Name: Krzysztof
	// 7. Name: Karol
	// 7. Name: Irek
	// 8. Krzysztof is awesome- this is the result
	// 9. lalalla
	// 9. Krzysztof is awesome- this is the result
	// 10. error - this is the result

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>