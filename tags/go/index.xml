<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Krzysztof Góralski</title>
    <link>https://kgoralski.github.io/tags/go/index.xml</link>
    <description>Recent content in Go on Krzysztof Góralski</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>[Krzysztof Góralski](https://kgoralski.github.io/). Released under the MIT license&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <atom:link href="https://kgoralski.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hello World: Apache Kafka &#43; Go, Kotlin &amp; Java</title>
      <link>https://kgoralski.github.io/post/kafka-go-kotlin-java/</link>
      <pubDate>Thu, 19 Jan 2017 21:12:10 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/kafka-go-kotlin-java/</guid>
      <description>

&lt;p&gt;Check the example here: &lt;a href=&#34;https://github.com/kgoralski/go-kotlin-java-kafka&#34;&gt;https://github.com/kgoralski/go-kotlin-java-kafka&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Java - demo-java-source with Spring Cloud Stream - localhost:8080
Kotlin - demo-kotlin-sink with Spring Cloud Stream - localhost:8081 (Consumer)
Go aka Golang - demo-go-sink with Shopify/sarama (Kafka Client) - localhost:8082 (Consumer)
Apache Kafka as Message Broker
Go Shopify/sarama - Apache Kafka Client
Go HTTP/2 Push example (just for fun)
Gradle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running Kafka inside Docker (&lt;a href=&#34;https://github.com/spotify/docker-kafka&#34;&gt;spotify/kafka&lt;/a&gt;) to play with it locally :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --name spotifykafka -p 2181:2181 -p 9092:9092 --env ADVERTISED_HOST=localhost --env ADVERTISED_PORT=9092 spotify/kafka 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to get Shopify/sarama lib - Kafka client:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/Shopify/sarama
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-to-run-it&#34;&gt;How to run it&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Run docker spotify/kafka&lt;/li&gt;
&lt;li&gt;Run Java/Kotlin/Go app from IDE (Prefer IDEA &amp;amp; Gogland)&lt;/li&gt;
&lt;li&gt;Send request to Java Source App - POST &lt;a href=&#34;http://localhost:8080/message&#34;&gt;http://localhost:8080/message&lt;/a&gt; {&amp;ldquo;name&amp;rdquo;: &amp;ldquo;Krzysztof&amp;rdquo;}&lt;/li&gt;
&lt;li&gt;Both Go and Kotlin app will print the messages on their consoles, something like this:
&lt;code&gt;
INFO 22360 --- [afka-listener-1] com.example.SampleSink  Kotlin received: Krzysztof
&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;Golang received: Krzysztof

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;content-type-with-go-application-problem&#34;&gt;Content-Type with Go Application Problem&lt;/h3&gt;

&lt;p&gt;If you have Spring Applications, you can just set content-type inside properties like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spring.cloud.stream.bindings.output.content-type=application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But Go Shopify/sarama client has problem with it, I used binary format, this way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spring.cloud.stream.bindings.output.producer.headerMode=raw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And my source in Java looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;	@PostMapping(path = &amp;quot;/message&amp;quot;, consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public @ResponseBody void sendMessage(@RequestBody MessageDto message) throws JsonProcessingException {
		byte[] bytes = objectMapper.writeValueAsBytes(message);

		// normally you can use something like this instead of bytes :
		// MessageBuilder.withPayload(message).build()
		output.send(new GenericMessage&amp;lt;&amp;gt;(bytes));
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you got better solution, tell me :)&lt;/p&gt;

&lt;h3 id=&#34;avro-content-type&#34;&gt;Avro Content-Type&lt;/h3&gt;

&lt;p&gt;My example doesn&amp;rsquo;t include it, but it is a popular Content-Type used with Apache Kafka.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.spring.io/spring-cloud-stream/docs/current-SNAPSHOT/reference/htmlsingle/#_avro_schema_registry_client_message_converters&#34;&gt;Spring Cloud Stream Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.beeworks.be/blog/2016/start-streaming-kafka-spring-cloud.html&#34;&gt;BeeWorks Blog: Start Streaming with Kafka and Spring Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/anywhereinfo/demo&#34;&gt;Github: Spring Cloud Stream, Kafka, Avro examples&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@Oskarr3/implementing-cqrs-using-kafka-and-sarama-library-in-golang-da7efa3b77fe#.razrnz8eh&#34;&gt;Implementing CQRS using Kafka and Sarama Library in Golang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecentric.de/en/2016/04/event-driven-microservices-spring-cloud-stream/&#34;&gt;Event Driven Microservices with Spring Cloud Stream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/rakyll/eec415977f85d50a493ca8472ba97b68&#34;&gt;Go 1.8 HTTP/2 Push&lt;/a&gt; - in my example it is almost the same&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;http-2-go-push-bonus-only-for-fun&#34;&gt;HTTP/2 Go Push Bonus (only for fun)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go 1.8beta2 required&lt;/li&gt;
&lt;li&gt;Run crypto/tls/generate_cert.go to generate cert.pem and key.pem. and put them to the project&lt;/li&gt;
&lt;li&gt;Go to &lt;a href=&#34;https://localhost:8082/&#34;&gt;https://localhost:8082/&lt;/a&gt; (yes, https)&lt;/li&gt;
&lt;li&gt;Resources will be pushed to browser, check Network (devtools)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Go Language - First Impressions</title>
      <link>https://kgoralski.github.io/post/go-impressions/</link>
      <pubDate>Sun, 04 Sep 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/go-impressions/</guid>
      <description>&lt;p&gt;Just wrote something small with Go Language. Simple CRUD/webservice with MySQL using gorilla mux and sqlx, but it is almost plain golang in dockerized environment. If anything wrong about it, tell me. If you know polish language you can check also this link: &lt;a href=&#34;http://www.consdata.pl/blog/12-pirewsze-kroki-z-golang&#34;&gt;http://www.consdata.pl/blog/12-pirewsze-kroki-z-golang&lt;/a&gt; ;)&lt;/p&gt;

&lt;p&gt;Here are my impressions about it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it feels pragmatic from the beginning&lt;/li&gt;
&lt;li&gt;probably you don’t need any frameworks at all to use it&lt;/li&gt;
&lt;li&gt;simpler = better, simplicity as a feature&lt;/li&gt;
&lt;li&gt;quite easy to write REST application&lt;/li&gt;
&lt;li&gt;the build in package manager ‘go get’ is cool thing&lt;/li&gt;
&lt;li&gt;compilation &amp;amp; running time of go server is much faster than java&lt;/li&gt;
&lt;li&gt;it doesn’t eat much of resources&lt;/li&gt;
&lt;li&gt;you can use many text editors or IDEs for it (IntelliJ has Go Plugin)&lt;/li&gt;
&lt;li&gt;gofmt – one and the only code formatter&lt;/li&gt;
&lt;li&gt;designed for special needs, not for everything&lt;/li&gt;
&lt;li&gt;it is easy to find examples by googling it, good enough community&lt;/li&gt;
&lt;li&gt;return multiple values from Go functions – nice feature&lt;/li&gt;
&lt;li&gt;syntax not beautiful like Python but still good&lt;/li&gt;
&lt;li&gt;the build in ‘testing’ package – ok, but too simple (testify looks better)&lt;/li&gt;
&lt;li&gt;concurrency – believe that it is nice, but didn’t tried it yet&lt;/li&gt;
&lt;li&gt;it is much different than Scala – complexity vs simplicity&lt;/li&gt;
&lt;li&gt;I think that I could be very productive with Go if i will get used to it&lt;/li&gt;
&lt;li&gt;Docker, Kubernetes, CoreOs,  Consul, Flynn, Lime, Google, Dropbox…&lt;/li&gt;
&lt;li&gt;heard that golang is good for ‘real time apps’ – want to try it soon&lt;/li&gt;
&lt;li&gt;it seems to be good for building command-line tools&lt;/li&gt;
&lt;li&gt;it is different than Java, little bit tricky at beginning, but easy to start ;)&lt;/li&gt;
&lt;li&gt;‘good when you need to write something yourself instead of using library’&lt;/li&gt;
&lt;li&gt;need to find idea for real project, because I kinda like Go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Links:
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;http://danmux.com/posts/what_golang_isnt/&#34;&gt;What Golang Is and Is Not&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://jimplush.com/talk/2015/12/19/moving-a-team-from-scala-to-golang/&#34;&gt;Moving a team from Scala to Golang&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/&#34;&gt;Handling 1 Million Requests per Minute with Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://text.sourcegraph.com/google-i-o-talk-building-sourcegraph-a-large-scale-code-search-cross-reference-engine-in-go-1f911b78a82e#.jd729lgy5&#34;&gt;Sourcegraph, a large-scale code search &amp;amp; cross-reference engine in Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://medium.com/@tjholowaychuk/farewell-node-js-4ba9e7f3e52b#.o6e4uex72&#34;&gt;Farewell Node.js - Leaving node.js land for Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://hashrocket.com/blog/posts/websocket-shootout&#34;&gt;Websocket Shootout: Clojure, C++, Elixir, Go, NodeJS, and Ruby&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JOx9enktnUM&#34;&gt;Go at Dropbox&lt;/a&gt; and &lt;a href=&#34;https://www.bigmarker.com/remote-meetup-go/Go-at-Dropbox&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/jpetazzo/docker-and-go-why-did-we-decide-to-write-docker-in-go&#34;&gt;Here&amp;rsquo;s Why Docker Was Written in Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/appleboy/write-microservice-in-golang&#34;&gt;Write microservice in golang&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://zduck.com/2014/go-and-package-versioning/&#34;&gt;Go and Package Versioning&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://allegro.tech/2016/03/writing-fast-cache-service-in-go.html&#34;&gt;allegro.tech - Writing a cache service with millions of entries in Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://eng.uber.com/go-geofence/&#34;&gt;Uber &amp;amp; Go&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/faq#What%5Fis%5Fthe%5Fpurpose%5Fof%5Fthe%5Fproject&#34;&gt;What is the purpose of Go project?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/GoUsers&#34;&gt;GoUsers&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.itjobswatch.co.uk/jobs/uk/go.do&#34;&gt;Go UK Jobs Watch&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.indeed.com/jobtrends/q-golang.html&#34;&gt;indeed job trends&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-is-the-future-of-the-Go-programming-language&#34;&gt;What is the future of the Go programming language?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.quora.com/Why-is-the-programming-language-GO-getting-so-popular-lately&#34;&gt;Why is the programming language GO getting so popular lately?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://blog.ralch.com/tutorial/golang-performance-and-memory-analysis/&#34;&gt;Performance and memory analysis of Golang programs&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://www.savethecode.com/racing-day-web-frameworks/&#34;&gt;Web Frameworks Benchmarks&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://opencredo.com/java-go-back/&#34;&gt;From Java to Go, and Back Again&lt;/a&gt; and &lt;a href=&#34;https://www.reddit.com/r/golang/comments/579wsk/from_java_to_go_and_back_again/?&#34;&gt;community reaction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>