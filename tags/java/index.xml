<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Krzysztof Góralski</title>
    <link>https://kgoralski.github.io/tags/java/index.xml</link>
    <description>Recent content in Java on Krzysztof Góralski</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>[Krzysztof Góralski](https://kgoralski.github.io/). Released under the MIT license&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <atom:link href="https://kgoralski.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ratpack</title>
      <link>https://kgoralski.github.io/post/ratpack/</link>
      <pubDate>Mon, 17 Oct 2016 08:41:23 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/ratpack/</guid>
      <description>&lt;p&gt;So, I heard that Java is not only about Spring or Java EE  :) There are also: Ratpack, &lt;a href=&#34;https://github.com/orefalo/lagom-sample-bank&#34;&gt;Lagom&lt;/a&gt;, &lt;a href=&#34;https://github.com/prajwalan/sparkjava-restapi-crud&#34;&gt;SparkJava&lt;/a&gt;, Akka&amp;hellip;Below, you will find great informations about Ratpack :) Check &lt;a href=&#34;http://salerno-rafael.blogspot.com/2016/08/ratpack-event-driven-framework-base-on.html&#34;&gt;this&lt;/a&gt; first.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Ratpack’s goals from &lt;a href=&#34;https://ratpack.io/manual/current/intro.html#goals&#34;&gt;docs &lt;/a&gt; are:
&lt;ol&gt;
    &lt;li&gt;To be fast, scalable, and efficient (Ratpack server  is up in 1 second)&lt;/li&gt;
    &lt;li&gt;To allow applications to evolve in complexity without compromise&lt;/li&gt;
    &lt;li&gt;To leverage the benefits of non-blocking programming and reduce the costs&lt;/li&gt;
    &lt;li&gt;To be flexible and unopinionated when it comes to integrating other tools and libraries&lt;/li&gt;
    &lt;li&gt;To allow applications to be easily and thoroughly tested&lt;/li&gt;
&lt;/ol&gt;
Ratpacks’s goals are &lt;strong&gt;not&lt;/strong&gt;:
&lt;ol&gt;
    &lt;li&gt;To be a fully integrated, “full stack” solution&lt;/li&gt;
    &lt;li&gt;Provide every feature you might need in a neat box&lt;/li&gt;
    &lt;li&gt;To provide an architecture or framework for “business logic”&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;When to use Ratpack?&lt;/div&gt;
&lt;ul&gt;
    &lt;li&gt;Micro-services&lt;/li&gt;
    &lt;li&gt;High-througthput apps&lt;/li&gt;
    &lt;li&gt;Lightweight apps&lt;/li&gt;
    &lt;li&gt;Cloud Deployments&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
Resources:
&lt;ol&gt;
    &lt;li&gt;&lt;a href=&#34;https://danhyun.github.io/2016-jeeconf-rapid-ratpack-java/&#34;&gt;Rapid Java Web Application Development with Ratpack&lt;/a&gt; + &lt;a href=&#34;https://github.com/danhyun/2016-jeeconf-rapid-ratpack-java&#34;&gt;github&lt;/a&gt; + &lt;a href=&#34;https://www.youtube.com/watch?v=2p3IO39BK1k&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gSL0OSCQcsY&#34;&gt;Devoxx Poland 2016 - Laurent Doguin - A practical RxJava example with Ratpack&lt;/a&gt; +&lt;a href=&#34;https://github.com/ldoguin/ratpack-couchbase-repository-sample&#34;&gt;github&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://blog.couchbase.com/2016/april/crud-rest-api-couchbase-rxjava-ratpack&#34;&gt;A CRUD REST API with Couchbase, RxJava and Ratpack&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://github.com/danhyun/modern-java-web&#34;&gt;Modern Java Web&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://ratpack.io/manual/current/spring.html&#34;&gt;Ratpack &amp;amp; Spring Boot&lt;/a&gt; and &lt;a href=&#34;https://www.infoq.com/articles/Ratpack-and-Spring-Boot&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/mobile/SpringCentral/high-performance-microservices-with-ratpack-and-spring-boot-64889596&#34;&gt;Sping &amp;amp; Ratpack Slideshare&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Great post &lt;a href=&#34;http://salerno-rafael.blogspot.com/2016/08/ratpack-event-driven-framework-base-on.html&#34;&gt;About Ratpack&lt;/a&gt; by Rafael Salerno&lt;/li&gt;
    &lt;li&gt;Testing [&lt;a href=&#34;https://github.com/danhyun/2016-greach-testing-ratpack-applications&#34;&gt;1&lt;/a&gt;], [&lt;a href=&#34;http://alvarosanchez.github.io/ratpack-101/#_testing_ratpack_applications_with_spock_20_minutes&#34;&gt;2&lt;/a&gt;],[&lt;a href=&#34;https://danhyun.github.io/2016-gr8confus-testing-ratpack-apps/&#34;&gt;3&lt;/a&gt;]&lt;/li&gt;
    &lt;li&gt;Often &lt;a href=&#34;http://www.jooq.org/why-jOOQ.pdf&#34;&gt;jOOQ &lt;/a&gt;is used with Ratpack, instead of Hibernate.&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Univocity Parsers Library</title>
      <link>https://kgoralski.github.io/post/univocity-parsers/</link>
      <pubDate>Thu, 25 Aug 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/univocity-parsers/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.univocity.com/&#34;&gt;Official Website&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mvnrepository.com/artifact/com.univocity/univocity-parsers&#34;&gt;Maven Repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below you can find how to parse .csv file with univocity library.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ExampleCsvToPojoParser {
   
    private final Logger logger = LoggerFactory.getLogger(CsvToPojoParser.class);
   
    public &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; parseFileToPojo(Class&amp;lt;T&amp;gt; clazz, String fileName) {
   
        BeanListProcessor&amp;lt;T&amp;gt; rowProcessor = new BeanListProcessor&amp;lt;T&amp;gt;(clazz);
   
        CsvParserSettings parserSettings = new CsvParserSettings();
   
        parserSettings.setRowProcessor(rowProcessor);
        parserSettings.setHeaderExtractionEnabled(true);
        parserSettings.setLineSeparatorDetectionEnabled(true);
        parserSettings.setSkipEmptyLines(true);
   
        CsvParser parser = new CsvParser(parserSettings);
        try (InputStream resourceAsStream = this.getClass().getClassLoader().getResourceAsStream(fileName)) {
            parser.parse(resourceAsStream);
        } catch (IOException e) {
            logger.error(&amp;quot;Cannot read file &amp;quot; + fileName, e );
        }
        return rowProcessor.getBeans();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can put there class like this (which will match the file):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Users {
   
    @Trim
    @NullString(nulls = { &amp;quot; &amp;quot;, &amp;quot;&amp;quot; })
    @Parsed(field = &amp;quot;USER_ID&amp;quot;)
    private Long userId;
    @Trim
    @NullString(nulls = { &amp;quot; &amp;quot;, &amp;quot;&amp;quot; })
    @Parsed(field = &amp;quot;USER_NAME&amp;quot;)
    private String userName;
    //getters &amp;amp; setters
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Wildfly CRUD example with Docker</title>
      <link>https://kgoralski.github.io/post/wildfly-crud-docker/</link>
      <pubDate>Sun, 31 Jul 2016 08:41:23 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/wildfly-crud-docker/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m not that familiar with pure Java EE stack. My experience is mostly mixing Java EE with Spring. So, I just wanted to play with it. You can find it here:
&lt;a href=&#34;https://github.com/kgoralski/wildfly-template&#34;&gt;&lt;a href=&#34;https://github.com/KrzysztofGoralski/wildfly-template&#34;&gt;https://github.com/KrzysztofGoralski/wildfly-template&lt;/a&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Java EE
JAX-RS - RESTEasy
Apache Deltaspike (similiar to Spring Data)
H2 Database
Docker
Maven
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is just an example and far from real application. It will be required to add tests for sure and it would be interesting to do it this way:
&lt;a href=&#34;http://blog.arungupta.me/run-javaee-tests-wildfly-docker-arquillian-cube/&#34;&gt;Docker with Arquillian Cube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install Docker first&amp;hellip; I&amp;rsquo;m using Intellij IDEA Ultimate, to add docker to this IDE:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. File-&amp;gt; Settings-&amp;gt; Builds, Executions, Deployment -&amp;gt; Clouds
2. Add Docker with API URL = unix:///var/run/docker.sock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My dockerfile is simple and using jboss/wildfly image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;FROM jboss/wildfly
ADD target/wildfly-template.war /opt/jboss/wildfly/standalone/deployments/
RUN /opt/jboss/wildfly/bin/add-user.sh admin Admin#70365 --silent
CMD [&amp;quot;/opt/jboss/wildfly/bin/standalone.sh&amp;quot;, &amp;quot;-b&amp;quot;, &amp;quot;0.0.0.0&amp;quot;, &amp;quot;-bmanagement&amp;quot;, &amp;quot;0.0.0.0&amp;quot;]
EXPOSE 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. Run -&amp;gt; Run... -&amp;gt; Edit Configurations
2. Add Docker deployment
3. Add image tag and container name in Deployment Tab
4. Generate new container_settings.json in Container tab
5. Run it :)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hystrix &amp; Spring Boot Configuration</title>
      <link>https://kgoralski.github.io/post/hystrix-springboot/</link>
      <pubDate>Mon, 28 Mar 2016 08:41:23 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/hystrix-springboot/</guid>
      <description>&lt;p&gt;Check this awesome &lt;a href=&#34;https://youtu.be/RpfQ8AHwEvg&#34;&gt;video&lt;/a&gt;. Below you can find how to configure Hystrix with Spring Boot 1.1.8 with Spring Cloud Hystrix Starter.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile &#39;org.springframework.cloud:spring-cloud-starter-hystrix:1.0.0.RELEASE&#39; for Spring Boot 1.1.8.
@EnableCircuitBreaker on Main/Runner class
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Register Hystrix Servlet:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
public class HystrixServletDefinitions {

       @Bean(name = &amp;quot;hystrixRegistrationBean&amp;quot;)
       public ServletRegistrationBean servletRegistrationBean() {
             ServletRegistrationBean registration = new ServletRegistrationBean(
                           new HystrixMetricsStreamServlet(), &amp;quot;/metrics/hystrix.stream&amp;quot;);
             registration.setName(&amp;quot;hystrixServlet&amp;quot;);
             registration.setLoadOnStartup(1);
             return registration;
       }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Add it to Spring Security if needed: .antMatchers(&amp;ldquo;/metrics/hystrix.stream&amp;rdquo;).permitAll()&lt;/li&gt;
&lt;li&gt;Create config.properties file like this  + check docs&lt;/li&gt;
&lt;li&gt;Create defaultMethod which will be used when CircuitBreaker will open:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public List&amp;lt;SampleObject&amp;gt; defaultMethod() {
             return Lists.newArrayList();
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use annotation where you want to use it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@HystrixCommand(fallbackMethod = &amp;quot;defaultMethod&amp;quot;)
       public List&amp;lt;SampleObject&amp;gt; getRealMethod() {
             // implementation...
       }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want cool Dashboard? Get and deploy somewhere Hystrix-Dashboard.war and target our &amp;ldquo;/metrics/hystrix.stream&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring &amp; Guava Cache</title>
      <link>https://kgoralski.github.io/post/spring-guava-cache/</link>
      <pubDate>Wed, 09 Mar 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/spring-guava-cache/</guid>
      <description>&lt;p&gt;Check the excellent guide &lt;a href=&#34;http://codedevstuff.blogspot.com/2015/07/add-guava-cache-to-spring-boot-to-cache.html&#34;&gt;here&lt;/a&gt; about Cache in Spring. Below you can find similar code. Also check the official &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/cache.html&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// compile (&#39;org.springframework:spring-context-support:4.0.7.RELEASE&#39;)
@Configuration
@EnableCaching
public class CacheConfig implements CachingConfigurer {
 
    public final static String CACHE = &amp;quot;cache&amp;quot;;
 
    private static final Logger LOGGER = LoggerFactory.getLogger(CacheConfig.class);
 
    @Bean
    @Override
    public CacheManager cacheManager() {
        LOGGER.info(&amp;quot;Initializing simple Guava Cache manager.&amp;quot;);
        SimpleCacheManager cacheManager = new SimpleCacheManager();
        GuavaCache discoveryCache = new GuavaCache(CACHE,
                CacheBuilder.newBuilder().expireAfterWrite(60, TimeUnit.MINUTES).build());
        cacheManager.setCaches(Arrays.asList(discoveryCache));
        return cacheManager;
    }
 
    @Bean
    @Override
    public KeyGenerator keyGenerator() {
        return new SimpleKeyGenerator();
    }
 
}
// mark method with @Cacheable annotation
@Component
public class CacheService {
 
    @Inject
    private BooksService bookService;
 
    @Cacheable(CacheConfig.CACHE)
    public List&amp;lt;Book&amp;gt; getBooks() {
        return bookService.getBooks();
    }
}
 
// You can clear cache like this
@Controller
@RequestMapping(&amp;quot;/&amp;quot;)
public class ClearCacheController {
 
    @CacheEvict(value = CacheConfig.CACHE, allEntries = true)
    @RequestMapping(value = &amp;quot;/clearCache&amp;quot;, method = RequestMethod.GET)
    public ResponseEntity&amp;lt;String&amp;gt; clearCache() {
        return new ResponseEntity&amp;lt;String&amp;gt;(&amp;quot;Cache Cleared&amp;quot;, HttpStatus.OK);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>RxJava Basics</title>
      <link>https://kgoralski.github.io/post/rxjava-basics/</link>
      <pubDate>Sun, 28 Feb 2016 10:35:47 +0100</pubDate>
      
      <guid>https://kgoralski.github.io/post/rxjava-basics/</guid>
      <description>&lt;p&gt;Inspired by &lt;a href=&#34;http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/&#34;&gt;Grokking RxJava Tutorial&lt;/a&gt; check the code snippet below, in this post or check it here &lt;a href=&#34;http://pastebin.com/9MR4k5E5&#34;&gt;http://pastebin.com/9MR4k5E5&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package org.rx.java.tutorial;

import java.util.ArrayList;
import java.util.List;

import rx.Observable;
import rx.Subscriber;
import rx.functions.Func1;

public class Main {

	// Check this tutorial:
	// http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/

	// Dependency for gradle project:
	// compile &#39;io.reactivex:rxjava:1.1.1&#39;

	// ====================================================================

	// Key idea #1: Observable and Subscriber can do anything.

	// Key idea #2: The Observable and Subscriber are independent of the
	// transformational steps in between them.

	// Key idea #3: Operators let you do anything to the stream of data. The
	// only limit is yourself.

	// ====================================================================

	// Notes:
	// 1. onError() is called if an Exception is thrown at any time.
	// 2. The operators don&#39;t have to handle the Exception.
	// 3. You know when the Subscriber has finished receiving items.
	// 4. When you call Observable.subscribe(), it returns a Subscription.
	// 5. RxJava has awesome docs / marble diagrams inside code
	// 6. using unsubscribe will terminate wherever it is currently executing
	// code
	// 7. List of operators:
	// https://github.com/ReactiveX/RxJava/wiki/Alphabetical-List-of-Observable-Operators

	public static void main(String[] args) {

		// 1. verbose example
		Observable&amp;lt;String&amp;gt; myObservable = Observable.create(new Observable.OnSubscribe&amp;lt;String&amp;gt;() {
			public void call(Subscriber&amp;lt;? super String&amp;gt; sub) {
				sub.onNext(extracted());
				sub.onCompleted();
			}

			private String extracted() {
				return &amp;quot;1. Hello, world!&amp;quot;;
			}
		});

		Subscriber&amp;lt;String&amp;gt; mySubscriber = new Subscriber&amp;lt;String&amp;gt;() {
			public void onCompleted() {
				System.out.println(&amp;quot;1. the end&amp;quot;);
			}

			public void onError(Throwable e) {
				System.out.println(&amp;quot;error&amp;quot;);
			}

			public void onNext(String s) {
				System.out.println(s);
			}
		};
		myObservable.subscribe(mySubscriber);

		// 2. almost same thing as above
		Observable.just(&amp;quot;2. Hello, world!&amp;quot;).subscribe(s -&amp;gt; System.out.println(s + &amp;quot;-Krzysztof&amp;quot;));

		// 3. map operator - transforming
		Observable.just(&amp;quot;3. Hello, world!&amp;quot;).map(s -&amp;gt; s + &amp;quot;-Krzysztof&amp;quot;)
				.subscribe(s -&amp;gt; System.out.println(s));
				// http://reactivex.io/documentation/operators/map.html

		// 4. subscriber receive Integer
		Observable.just(&amp;quot;4. Hello, world!&amp;quot;).map(s -&amp;gt; s.hashCode())
				.subscribe(i -&amp;gt; System.out.println(&amp;quot;4. &amp;quot; + Integer.toString(i)));

		// 5. subscriber shouldn&#39;t have much logic so...
		Observable.just(&amp;quot;5. Hello, world!&amp;quot;).map(s -&amp;gt; s.hashCode()).map(i -&amp;gt; Integer.toString(i))
				.subscribe(s -&amp;gt; System.out.println(&amp;quot;5. &amp;quot; + s));

		// 6. some transformations
		Observable.just(&amp;quot;6. Hello, world!&amp;quot;).map(s -&amp;gt; s + &amp;quot; -Krzysztof&amp;quot;).map(s -&amp;gt; s.hashCode())
				.map(i -&amp;gt; Integer.toString(i)).subscribe(s -&amp;gt; System.out.println(&amp;quot;6. &amp;quot; + s));

		List&amp;lt;String&amp;gt; arrayList = new ArrayList&amp;lt;String&amp;gt;();
		arrayList.add(&amp;quot;Krzysztof&amp;quot;);
		arrayList.add(&amp;quot;Karol&amp;quot;);
		arrayList.add(&amp;quot;Irek&amp;quot;);

		// 7. from operator emits one element each time
		Observable.just(arrayList).subscribe(names -&amp;gt; {
			Observable.from(names).subscribe(name -&amp;gt; System.out.println(&amp;quot;7. Name: &amp;quot; + name));
		});
		// http://reactivex.io/documentation/operators/from.html

		// 8. list observable transformed into observable which emits single
		// result with after change name, filtering and taking entry at the end
		Observable.just(arrayList).flatMap(names -&amp;gt; Observable.from(names))
				.flatMap(name -&amp;gt; Observable.just(name + &amp;quot; is awesome&amp;quot;))
				.filter(nameChange -&amp;gt; !&amp;quot;Karol is awesome&amp;quot;.equals(nameChange)).take(1)
				.subscribe(result -&amp;gt; System.out.println(&amp;quot;8. &amp;quot; + result + &amp;quot;- this is the result&amp;quot;));
				// http://reactivex.io/documentation/operators/flatmap.html

		// 9. doOnNext() allows us to add extra behavior each time an item is
		// emitted, in this case singing &#39;lalala&#39;
		Observable.just(arrayList).flatMap(names -&amp;gt; Observable.from(names))
				.flatMap(name -&amp;gt; Observable.just(name + &amp;quot; is awesome&amp;quot;))
				.filter(nameChange -&amp;gt; !&amp;quot;Irek is awesome&amp;quot;.equals(nameChange)).take(1)
				.doOnNext(nameChange -&amp;gt; System.out.println(&amp;quot;9. lalalla&amp;quot;))
				.subscribe(result -&amp;gt; System.out.println(&amp;quot;9. &amp;quot; + result + &amp;quot;- this is the result&amp;quot;));
				// http://reactivex.io/documentation/operators/filter.html
				// http://reactivex.io/RxJava/javadoc/rx/Observable.html#doOnNext(rx.functions.Action1)

		// 10. error example
		Observable.just(arrayList).flatMap(names -&amp;gt; Observable.from(names))
				.flatMap(name -&amp;gt; Observable.just(name + &amp;quot; is awesome&amp;quot;))
				.filter(nameChange -&amp;gt; getError(nameChange).equals(&amp;quot;anything&amp;quot;)).take(1)
				.doOnNext(nameChange -&amp;gt; System.out.println(&amp;quot;10. lalalla&amp;quot;))
				.onErrorReturn(new Func1&amp;lt;Throwable, String&amp;gt;() {
					@Override
					public String call(Throwable t) {
						return &amp;quot;error&amp;quot;;
					}
				})
				.subscribe(result -&amp;gt; System.out.println(&amp;quot;10. &amp;quot; + result + &amp;quot; - this is the result&amp;quot;));

		// 11. Schedulers: easy threading
		// myObservableServices.retrieveImage(url)
		// .subscribeOn(Schedulers.io())
		// .observeOn(AndroidSchedulers.mainThread())
		// .subscribe(bitmap -&amp;gt; myImageView.setImageBitmap(bitmap));

		// subscribeOn(Scheduler scheduler): Asynchronously subscribes Observers
		// to this Observable on the specified Scheduler.

		// observeOn(Scheduler scheduler): Modifies an Observable to perform its
		// emissions and notifications on a specified Scheduler, asynchronously
		// with a bounded buffer.

		// check: http://reactivex.io/documentation/operators/subscribeon.html

	}

	private static String getError(String name) {
		throw new RuntimeException();
	}

	// OUTPUT:
	// 1. Hello, world!
	// 1. the end
	// 2. Hello, world!-Krzysztof
	// 3. Hello, world!-Krzysztof
	// 4. -1028118321
	// 5. -1538652498
	// 6. -1846029788
	// 7. Name: Krzysztof
	// 7. Name: Karol
	// 7. Name: Irek
	// 8. Krzysztof is awesome- this is the result
	// 9. lalalla
	// 9. Krzysztof is awesome- this is the result
	// 10. error - this is the result

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>